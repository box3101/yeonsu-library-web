---
export interface Props {
  /**
   * select의 id 속성
   */
  id?: string;
  /**
   * select의 name 속성
   */
  name?: string;
  /**
   * select의 기본값
   */
  value?: string;
  /**
   * 크기 variant
   */
  size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
  /**
   * 너비 variant
   */
  width?: 'auto' | 'full' | 'fit';
  /**
   * 비활성화 여부
   */
  disabled?: boolean;
  /**
   * 필수 입력 여부
   */
  required?: boolean;
  /**
   * 선택 완료 상태 여부
   */
  filled?: boolean;
  /**
   * 스타일 variant
   */
  variant?: 'default' | 'ghost';
  /**
   * 추가 CSS 클래스
   */
  class?: string;
  /**
   * 상태 (에러, 성공 등)
   */
  state?: 'default' | 'success' | 'error' | 'warning';
  /**
   * 라벨 텍스트
   */
  label?: string;
  /**
   * 도움말 텍스트
   */
  helperText?: string;
  /**
   * 에러 메시지
   */
  errorMessage?: string;
  /**
   * 옵션 배열
   */
  options: Array<{
    value: string;
    label: string;
    disabled?: boolean;
  }>;
}

const {
  id,
  name,
  value,
  size = 'medium',
  width = 'auto',
  disabled = false,
  required = false,
  filled = false,
  variant = 'default',
  class: className = '',
  options = [],
  label,
  helperText,
  errorMessage,
  state = 'default',
  ...rest
} = Astro.props;

const selectId = id || `select-${Math.random().toString(36).substr(2, 9)}`;

// 상태 체크
const hasLabel = label && label.length > 0;
const hasHelperText = helperText && helperText.length > 0;
const hasErrorMessage = errorMessage && errorMessage.length > 0;
const isError = state === 'error';

// 컨테이너 클래스
const containerClasses = ['ui-select-container', isError ? 'ui-select-container--error' : ''].filter(Boolean).join(' ');

// 셀렉트 클래스
const selectClasses = [
  'ui-select',
  `ui-select--${variant}`,
  `ui-select--${size}`,
  `ui-select--width-${width}`,
  `ui-select--${state}`,
  filled || (value && value.length > 0) ? 'ui-select--filled' : '',
  disabled ? 'ui-select--disabled' : '',
  className,
]
  .filter(Boolean)
  .join(' ');

// 도움말 클래스
const helpClasses = ['ui-select__help', isError ? 'ui-select__help--error' : ''].filter(Boolean).join(' ');
---

<div class={containerClasses}>
  {
    hasLabel && (
      <label for={selectId} class="ui-select__label">
        {label}
        {required && <span class="ui-select__required">*</span>}
      </label>
    )
  }

  <div class={selectClasses}>
    <div class="ui-select__wrapper">
      <select
        id={selectId}
        name={name}
        disabled={disabled}
        required={required}
        class="ui-select__element"
        aria-invalid={isError}
        aria-describedby={hasHelperText || hasErrorMessage ? `${selectId}-help` : undefined}
        {...rest}
      >
        {
          options.map(option => (
            <option value={option.value} disabled={option.disabled} selected={value === option.value}>
              {option.label}
            </option>
          ))
        }
      </select>
      <div class="ui-select__arrow">
        <img src="./assets/images/icon/icon-arrow-down.svg" alt="" />
      </div>
    </div>
  </div>

  {
    (hasHelperText || hasErrorMessage) && (
      <div id={`${selectId}-help`} class={helpClasses}>
        {isError && hasErrorMessage ? errorMessage : helperText}
      </div>
    )
  }
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // 모든 ui-select에 대해 동적 filled 상태 처리
    const allSelects = document.querySelectorAll('.ui-select__element');

    allSelects.forEach(select => {
      const selectContainer = select.closest('.ui-select');

      function toggleFilledState() {
        if (select.value && select.value.length > 0) {
          selectContainer.classList.add('ui-select--filled');
        } else {
          selectContainer.classList.remove('ui-select--filled');
        }
      }

      // Select 이벤트 리스너 - 사용자가 선택할 때
      select.addEventListener('change', toggleFilledState);
      select.addEventListener('input', toggleFilledState);

      // 초기 상태 설정
      toggleFilledState();
    });
  });
</script>
