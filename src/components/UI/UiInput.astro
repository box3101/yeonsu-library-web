---
export interface Props {
  type?: 'text' | 'email' | 'password' | 'search' | 'tel' | 'url' | 'number';
  name?: string;
  id?: string;
  placeholder?: string;
  value?: string;
  disabled?: boolean;
  readonly?: boolean;
  required?: boolean;
  size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
  variant?: 'default' | 'filled' | 'outlined' | 'ghost';
  state?: 'default' | 'success' | 'error' | 'warning' | 'filled';
  icon?: string;
  iconPosition?: 'left' | 'right';
  label?: string;
  helperText?: string;
  errorMessage?: string;
  width?: string | number;
  maxlength?: number;
  clearable?: boolean;
  class?: string;
}

const {
  type = 'text',
  name,
  id,
  placeholder,
  value,
  disabled = false,
  readonly = false,
  required = false,
  size = 'medium',
  variant = 'default',
  state = 'default',
  icon,
  iconPosition = 'left',
  label,
  helperText,
  errorMessage,
  width,
  maxlength,
  clearable = false,
  class: className = '',
} = Astro.props;

const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;
const hasIcon = icon && icon.length > 0;
const hasLabel = label && label.length > 0;
const hasHelperText = helperText && helperText.length > 0;
const hasErrorMessage = errorMessage && errorMessage.length > 0;
const isError = state === 'error';

const inputClasses = [
  'ui-input',
  `ui-input--${size}`,
  `ui-input--${variant}`,
  `ui-input--${state === 'filled' || (value && value.length > 0) ? 'filled' : state}`,
  hasIcon ? `ui-input--icon-${iconPosition}` : '',
  clearable ? 'ui-input--clearable' : '',
  disabled ? 'ui-input--disabled' : '',
  readonly ? 'ui-input--readonly' : '',
  className,
]
  .filter(Boolean)
  .join(' ');

const containerStyle = width ? `width: ${typeof width === 'number' ? width + 'px' : width}` : '';
---

<div class="ui-input-container" style={containerStyle}>
  {
    hasLabel && (
      <label for={inputId} class="ui-input__label">
        {label}
        {required && <span class="ui-input__required">*</span>}
      </label>
    )
  }

  <div class="ui-input__wrapper">
    {
      hasIcon && iconPosition === 'left' && (
        <div class="ui-input__icon ui-input__icon--left">
          <img src={`./assets/images/icon/${icon}.svg`} alt="" />
        </div>
      )
    }

    <input
      type={type}
      id={inputId}
      name={name}
      class={inputClasses}
      placeholder={placeholder}
      value={value}
      disabled={disabled}
      readonly={readonly}
      required={required}
      maxlength={maxlength}
      aria-invalid={isError}
      aria-describedby={hasHelperText || hasErrorMessage ? `${inputId}-help` : undefined}
    />

    {
      hasIcon && iconPosition === 'right' && (
        <div class="ui-input__icon ui-input__icon--right">
          <img src={`./assets/images/icon/${icon}.svg`} alt="" />
        </div>
      )
    }

    {
      clearable && (
        <button class="ui-input__clear">
          <i class="icon icon-xsm icon-input-clear" />
        </button>
      )
    }
  </div>

  {
    (hasHelperText || hasErrorMessage) && (
      <div id={`${inputId}-help`} class="ui-input__help">
        {isError && hasErrorMessage ? errorMessage : helperText}
      </div>
    )
  }
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // 모든 ui-input에 대해 동적 filled 상태 처리
    const allInputs = document.querySelectorAll('.ui-input');

    allInputs.forEach(input => {
      function toggleFilledState() {
        if (input.value && input.value.length > 0) {
          input.classList.add('ui-input--filled');
        } else {
          input.classList.remove('ui-input--filled');
        }
      }

      // Input 이벤트 리스너 - 사용자가 타이핑할 때
      input.addEventListener('input', toggleFilledState);
      input.addEventListener('change', toggleFilledState);
      input.addEventListener('blur', toggleFilledState);

      // 초기 상태 설정
      toggleFilledState();
    });

    // 모든 clearable input에 대해 기능 추가
    const clearableInputs = document.querySelectorAll('.ui-input--clearable');

    clearableInputs.forEach(input => {
      const container = input.closest('.ui-input-container');
      const clearButton = container?.querySelector('.ui-input__clear');

      if (!clearButton) return;

      // Input 값 변경 시 clear 버튼 표시/숨김
      function toggleClearButton() {
        if (input.value.length > 0) {
          clearButton.classList.add('is-visible');
        } else {
          clearButton.classList.remove('is-visible');
        }
      }

      // Clear 버튼 클릭 시 input 내용 지우기
      clearButton.addEventListener('click', function (e) {
        e.preventDefault();
        input.value = '';
        input.focus();
        toggleClearButton();

        // filled 상태도 업데이트
        input.classList.remove('ui-input--filled');

        // Input 이벤트 발생시키기 (다른 JavaScript가 반응할 수 있도록)
        input.dispatchEvent(new Event('input', { bubbles: true }));
        input.dispatchEvent(new Event('change', { bubbles: true }));
      });

      // Input 이벤트 리스너
      input.addEventListener('input', toggleClearButton);
      input.addEventListener('keyup', toggleClearButton);

      // 초기 상태 설정
      toggleClearButton();
    });
  });
</script>
