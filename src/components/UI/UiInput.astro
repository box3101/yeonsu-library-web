---
export interface Props {
  type?: 'text' | 'email' | 'password' | 'search' | 'tel' | 'url' | 'number';
  name?: string;
  id?: string;
  placeholder?: string;
  value?: string;
  disabled?: boolean;
  readonly?: boolean;
  required?: boolean;
  size?: 'small' | 'medium' | 'large';
  variant?: 'default' | 'filled' | 'outlined' | 'ghost';
  state?: 'default' | 'success' | 'error' | 'warning';
  icon?: string;
  iconPosition?: 'left' | 'right';
  label?: string;
  helperText?: string;
  errorMessage?: string;
  width?: string | number;
  maxlength?: number;
  class?: string;
}

const {
  type = 'text',
  name,
  id,
  placeholder,
  value,
  disabled = false,
  readonly = false,
  required = false,
  size = 'medium',
  variant = 'default',
  state = 'default',
  icon,
  iconPosition = 'left',
  label,
  helperText,
  errorMessage,
  width,
  maxlength,
  class: className = '',
} = Astro.props;

const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;
const hasIcon = icon && icon.length > 0;
const hasLabel = label && label.length > 0;
const hasHelperText = helperText && helperText.length > 0;
const hasErrorMessage = errorMessage && errorMessage.length > 0;
const isError = state === 'error';

const inputClasses = [
  'ui-input',
  `ui-input--${size}`,
  `ui-input--${variant}`,
  `ui-input--${state}`,
  hasIcon ? `ui-input--icon-${iconPosition}` : '',
  disabled ? 'ui-input--disabled' : '',
  readonly ? 'ui-input--readonly' : '',
  className,
]
  .filter(Boolean)
  .join(' ');

const containerStyle = width
  ? `width: ${typeof width === 'number' ? width + 'px' : width}`
  : '';
---

<div class="ui-input-container" style={containerStyle}>
  {
    hasLabel && (
      <label for={inputId} class="ui-input__label">
        {label}
        {required && <span class="ui-input__required">*</span>}
      </label>
    )
  }

  <div class="ui-input__wrapper">
    {
      hasIcon && iconPosition === 'left' && (
        <div class="ui-input__icon ui-input__icon--left">
          <img src={`./assets/images/icon/${icon}.svg`} alt="" />
        </div>
      )
    }

    <input
      type={type}
      id={inputId}
      name={name}
      class={inputClasses}
      placeholder={placeholder}
      value={value}
      disabled={disabled}
      readonly={readonly}
      required={required}
      maxlength={maxlength}
      aria-invalid={isError}
      aria-describedby={hasHelperText || hasErrorMessage
        ? `${inputId}-help`
        : undefined}
    />

    {
      hasIcon && iconPosition === 'right' && (
        <div class="ui-input__icon ui-input__icon--right">
          <img src={`./assets/images/icon/${icon}.svg`} alt="" />
        </div>
      )
    }
  </div>

  {
    (hasHelperText || hasErrorMessage) && (
      <div id={`${inputId}-help`} class="ui-input__help">
        {isError && hasErrorMessage ? errorMessage : helperText}
      </div>
    )
  }
</div>

<style lang="scss">
  @use '@styles/abstracts' as *;
  @use '@styles/variables/colors' as *;

  .ui-input-container {
    display: flex;
    flex-direction: column;
    gap: to-rem(8);
  }

  .ui-input__label {
    font-size: 0.875rem;
    font-weight: $font-medium;
    color: $gray-700;
    line-height: 1.4;

    .ui-input__required {
      color: $error-color;
      margin-left: to-rem(2);
    }
  }

  .ui-input__wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .ui-input {
    width: 100%;
    font-family: inherit;
    font-size: 1rem;
    line-height: 1.5;
    border-radius: to-rem(8);
    border: 1px solid $gray-300;
    background-color: $white;
    color: $gray-900;
    transition: all 0.2s ease;
    outline: none;

    &::placeholder {
      color: $gray-400;
    }

    &:focus {
      border-color: $blue-500;
      box-shadow: 0 0 0 3px rgba(0, 124, 204, 0.1);
    }

    &:hover:not(:disabled):not(:readonly) {
      border-color: $gray-400;
    }

    // 크기 variants
    &--small {
      padding: to-rem(8) to-rem(12);
      font-size: 0.875rem;
      height: to-rem(36);
    }

    &--medium {
      padding: to-rem(12) to-rem(16);
      font-size: 1rem;
      height: to-rem(50);
    }

    &--large {
      padding: to-rem(16) to-rem(20);
      font-size: 1.125rem;
      height: to-rem(52);
    }

    // 스타일 variants
    &--filled {
      background-color: $gray-50;
      border-color: transparent;

      &:focus {
        background-color: $white;
        border-color: $blue-500;
      }
    }

    &--outlined {
      background-color: transparent;
      border-width: 2px;
    }

    &--ghost {
      background-color: transparent;
      border-color: transparent;

      &:focus {
        border-color: $blue-500;
        background-color: $white;
      }
    }

    // 상태 variants
    &--success {
      border-color: $success-color;

      &:focus {
        border-color: $success-color;
        box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.1);
      }
    }

    &--error {
      border-color: $error-color;

      &:focus {
        border-color: $error-color;
        box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
      }
    }

    &--warning {
      border-color: $warning-color;

      &:focus {
        border-color: $warning-color;
        box-shadow: 0 0 0 3px rgba(245, 158, 11, 0.1);
      }
    }

    // 아이콘이 있을 때 패딩 조정
    &--icon-left {
      &.ui-input--small {
        padding-left: to-rem(36);
      }

      &.ui-input--medium {
        padding-left: to-rem(44);
      }

      &.ui-input--large {
        padding-left: to-rem(52);
      }
    }

    &--icon-right {
      &.ui-input--small {
        padding-right: to-rem(36);
      }

      &.ui-input--medium {
        padding-right: to-rem(44);
      }

      &.ui-input--large {
        padding-right: to-rem(52);
      }
    }

    // 비활성화 상태
    &--disabled {
      background-color: $gray-100;
      color: $gray-400;
      cursor: not-allowed;

      &::placeholder {
        color: $gray-300;
      }
    }

    // 읽기 전용 상태
    &--readonly {
      background-color: $gray-50;
      cursor: default;
    }
  }

  .ui-input__icon {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    color: $gray-400;
    pointer-events: none;
    z-index: 1;

    img {
      width: to-rem(16);
      height: to-rem(16);
      opacity: 0.6;
    }

    &--left {
      left: to-rem(12);
    }

    &--right {
      right: to-rem(12);
    }
  }

  .ui-input__help {
    font-size: 0.75rem;
    line-height: 1.4;
    color: $gray-500;

    .ui-input--error + & {
      color: $error-color;
    }

    .ui-input--warning + & {
      color: $warning-color;
    }

    .ui-input--success + & {
      color: $success-color;
    }
  }
</style>
