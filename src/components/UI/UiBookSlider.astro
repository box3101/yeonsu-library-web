---
export interface BookItem {
  id: string | number;
  title: string;
  author: string;
  imageUrl: string;
  href?: string;
}

export interface Props {
  books: BookItem[];
  slidesPerView?: number;
  spaceBetween?: number;
  loop?: boolean;
  autoplay?: boolean | { delay: number; disableOnInteraction: boolean };
  navigation?: boolean;
  className?: string;
  id?: string;
}

const {
  books,
  slidesPerView = 5,
  spaceBetween = 16,
  loop = false,
  autoplay = false,
  navigation = true,
  className = '',
  id = `book-slider-${Math.random().toString(36).substr(2, 9)}`,
} = Astro.props;

const sliderClasses = [
  'ui-book-slider',
  'swiper',
  className,
]
  .filter(Boolean)
  .join(' ');
---

<div class={`ui-book-slider-container ${className}`}>
  <div class={sliderClasses} id={id}>
    <div class="swiper-wrapper">
      {books.map((book) => (
        <div class="swiper-slide">
          <div class="ui-book-slider__item">
            <div class="ui-book-slider__image-wrapper">
              {book.href ? (
                <a href={book.href} class="ui-book-slider__image-link">
                  <img
                    src={book.imageUrl}
                    alt={book.title}
                    class="ui-book-slider__image"
                  />
                </a>
              ) : (
                <img
                  src={book.imageUrl}
                  alt={book.title}
                  class="ui-book-slider__image"
                />
              )}
            </div>
            <div class="ui-book-slider__info">
              <h3 class="ui-book-slider__title">
                {book.href ? (
                  <a href={book.href} class="ui-book-slider__title-link">
                    {book.title}
                  </a>
                ) : (
                  book.title
                )}
              </h3>
              <p class="ui-book-slider__author">{book.author}</p>
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- Navigation buttons -->
    {navigation && (
      <>
        <button
          class={`ui-book-slider__nav ui-book-slider__nav--prev ${id}-btn-prev`}
          type="button"
          aria-label="이전 도서"
        >
          <i class="icon icon-arrow-left"></i>
        </button>
        <button
          class={`ui-book-slider__nav ui-book-slider__nav--next ${id}-btn-next`}
          type="button"
          aria-label="다음 도서"
        >
          <i class="icon icon-arrow-right"></i>
        </button>
      </>
    )}
  </div>
</div>

<script define:vars={{ id, slidesPerView, spaceBetween, loop, autoplay, navigation }}>
  document.addEventListener('DOMContentLoaded', function() {
    function initBookSlider() {
      // Swiper 라이브러리 로드 확인
      if (typeof Swiper === 'undefined') {
        console.warn('Swiper library not loaded yet, retrying in 100ms...');
        setTimeout(initBookSlider, 100);
        return;
      }

      const sliderElement = document.getElementById(id);
      if (!sliderElement) {
        console.warn(`Book slider element with id "${id}" not found`);
        return;
      }

      const slides = sliderElement.querySelectorAll('.swiper-slide');
      console.log(`Book slider "${id}" slides count:`, slides.length);

      // Swiper 옵션 설정
      const swiperOptions = {
        slidesPerView: slidesPerView,
        spaceBetween: spaceBetween,
        loop: loop && slides.length > slidesPerView,
        speed: 600,
        
        // 반응형 설정
        breakpoints: {
          320: {
            slidesPerView: Math.min(2, slidesPerView),
            spaceBetween: 12,
          },
          640: {
            slidesPerView: Math.min(3, slidesPerView),
            spaceBetween: 14,
          },
          768: {
            slidesPerView: Math.min(4, slidesPerView),
            spaceBetween: 16,
          },
          1024: {
            slidesPerView: slidesPerView,
            spaceBetween: spaceBetween,
          },
        },

        // 네비게이션 설정
        navigation: navigation ? {
          nextEl: `.${id}-btn-next`,
          prevEl: `.${id}-btn-prev`,
        } : false,

        // 자동재생 설정
        autoplay: autoplay ? (
          typeof autoplay === 'object' ? autoplay : {
            delay: 4000,
            disableOnInteraction: false,
          }
        ) : false,

        // 이벤트 핸들러
        on: {
          init: function() {
            console.log(`Book slider "${id}" initialized with ${this.slides.length} slides`);
          },
          slideChange: function() {
            console.log(`Book slider "${id}" slide changed to:`, this.activeIndex);
          }
        }
      };

      // Swiper 인스턴스 생성
      const swiper = new Swiper(`#${id}`, swiperOptions);
      
      console.log(`Book slider "${id}" setup complete`);
    }

    // 초기화 실행
    initBookSlider();
  });
</script>

<style lang="scss">
  @use '@styles/abstracts' as *;
  @use '@styles/variables/colors' as *;

  .ui-book-slider-container {
    position: relative;
    width: 100%;
  }

  .ui-book-slider {
    width: 100%;
    height: auto;
    overflow: hidden;

    &__item {
      display: flex;
      flex-direction: column;
      height: 100%;
      cursor: pointer;
      transition: transform 0.2s ease;

      &:hover {
        transform: translateY(-2px);
      }
    }

    &__image-wrapper {
      position: relative;
      width: 100%;
      aspect-ratio: 3 / 4;
      margin-bottom: to-rem(12);
      border-radius: to-rem(8);
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    &__image-link {
      display: block;
      width: 100%;
      height: 100%;
    }

    &__image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center;
      transition: transform 0.3s ease;

      &:hover {
        transform: scale(1.02);
      }
    }

    &__info {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: to-rem(4);
    }

    &__title {
      font-family: $font-family-primary;
      font-weight: 600;
      font-size: to-rem(14);
      line-height: 1.4;
      color: $text-color;
      margin: 0;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;

      @include mobile {
        font-size: to-rem(13);
      }
    }

    &__title-link {
      color: inherit;
      text-decoration: none;
      transition: color 0.2s ease;

      &:hover {
        color: $primary-color;
      }
    }

    &__author {
      font-family: $font-family-primary;
      font-weight: 400;
      font-size: to-rem(13);
      line-height: 1.3;
      color: $gray-600;
      margin: 0;
      display: -webkit-box;
      -webkit-line-clamp: 1;
      -webkit-box-orient: vertical;
      overflow: hidden;

      @include mobile {
        font-size: to-rem(12);
      }
    }

    // Navigation buttons
    &__nav {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      z-index: 10;
      display: flex;
      align-items: center;
      justify-content: center;
      width: to-rem(40);
      height: to-rem(40);
      background: rgba(255, 255, 255, 0.9);
      border: 1px solid rgba(0, 0, 0, 0.1);
      border-radius: 50%;
      cursor: pointer;
      transition: all 0.2s ease;
      backdrop-filter: blur(4px);

      &:hover {
        background: rgba(255, 255, 255, 1);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        transform: translateY(-50%) scale(1.05);
      }

      &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        pointer-events: none;
      }

      &--prev {
        left: to-rem(-20);
      }

      &--next {
        right: to-rem(-20);
      }

      i {
        font-size: to-rem(18);
        color: $gray-700;
      }

      @include mobile {
        width: to-rem(36);
        height: to-rem(36);

        &--prev {
          left: to-rem(-18);
        }

        &--next {
          right: to-rem(-18);
        }

        i {
          font-size: to-rem(16);
        }
      }
    }

    // Swiper 오버라이드
    .swiper-wrapper {
      align-items: stretch;
    }

    .swiper-slide {
      height: auto;
    }
  }

  // 반응형 조정
  @include tablet {
    .ui-book-slider {
      &__item {
        &:hover {
          transform: none;
        }
      }

      &__image:hover {
        transform: none;
      }
    }
  }

  @include mobile {
    .ui-book-slider {
      &__image-wrapper {
        margin-bottom: to-rem(8);
        border-radius: to-rem(6);
      }

      &__info {
        gap: to-rem(2);
      }
    }
  }
</style>