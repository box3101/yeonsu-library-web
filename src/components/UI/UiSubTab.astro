---
export interface Props {
  /**
   * 탭 제목 배열
   */
  tabs: string[];
  /**
   * 기본 활성 탭 인덱스
   */
  activeTab?: number;
  /**
   * 추가 CSS 클래스
   */
  class?: string;
  /**
   * 컨테이너 ID
   */
  id?: string;
}

const {
  tabs,
  activeTab = 0,
  class: className = '',
  id,
  ...rest
} = Astro.props;

const containerClasses = [
  'subtab-container',
  className,
]
  .filter(Boolean)
  .join(' ');
---

<div class={containerClasses} id={id} {...rest}>
  <div class="subtab-list">
    {tabs.map((tab, index) => (
      <button
        class={`subtab-item ${index === activeTab ? 'active' : ''}`}
        data-tab={index}
        type="button"
        set:html={tab}
      >
      </button>
    ))}
  </div>

  <div class="subtab-content">
    <slot />
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.subtab-container').forEach(container => {
      const tabs = container.querySelectorAll('.subtab-item');
      const panels = container.querySelectorAll('[data-content]');
      
      tabs.forEach((tab, index) => {
        tab.addEventListener('click', () => {
          // 현재 컨테이너 내의 모든 탭 비활성화
          tabs.forEach(t => t.classList.remove('active'));
          panels.forEach(c => c.classList.remove('active'));
          
          // 선택한 탭 활성화
          tab.classList.add('active');
          const targetIndex = parseInt(tab.getAttribute('data-tab'));
          const targetPanel = container.querySelector(`[data-content="${targetIndex}"]`);
          
          if (targetPanel) {
            targetPanel.classList.add('active');
          }
          
          // 커스텀 이벤트 발생 (외부에서 탭 변경을 감지할 수 있도록)
          container.dispatchEvent(new CustomEvent('tabchange', {
            detail: { activeTab: targetIndex, tabElement: tab }
          }));
        });
      });
    });
  });
</script>