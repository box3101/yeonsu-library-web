---
import { UiTab, UiTable } from '@components';
import type { TableColumn, TableRow } from './UiTable.astro';

export interface TabOption {
  id: string;
  label: string;
  active?: boolean;
}

export interface Props {
  title: string;
  isExpanded?: boolean;
  iconType?: 'arrow' | 'close';
  className?: string;
  tabsClassName?: string;
  columns: TableColumn[];
  rows: TableRow[];
  tabs?: TabOption[];
}

const {
  title,
  isExpanded = false,
  iconType = 'arrow',
  className = '',
  tabsClassName = '',
  columns,
  rows,
  tabs = [
    { id: 'all', label: '전체(3)', active: true },
    { id: 'okryeon2', label: '옥련2동어린이작은도서관' },
    { id: 'okryeon2-2', label: '옥련2동어린이작은도서관' },
    { id: 'okryeon2-3', label: '옥련2동어린이작은도서관' },
    { id: 'okryeon2-4', label: '옥련2동어린이작은도서관' },
    { id: 'okryeon2-5', label: '옥련2동어린이작은도서관' },
    { id: 'okryeon2-6', label: '옥련2동어린이작은도서관' },
    { id: 'okryeon2-7', label: '옥련2동어린이작은도서관' },
  ],
} = Astro.props;

const accordionId = `accordion-${Math.random().toString(36).substr(2, 9)}`;
---

<div
  class={`ui-collection-accordion ${className}`}
  data-accordion-id={accordionId}
>
  <button
    type="button"
    class="ui-collection-accordion__trigger"
    aria-expanded={isExpanded}
    aria-controls={accordionId}
  >
    <div class="ui-collection-accordion__trigger-content">
      <span class="ui-collection-accordion__title">{title}</span>
    </div>
    {
      iconType === 'arrow' ? (
        <i class="icon icon-xmd icon-arrow-down" />
      ) : (
        <i class="icon icon-xmd icon-close" />
      )
    }
  </button>

  <div
    id={accordionId}
    class="ui-collection-accordion__content"
    data-expanded={isExpanded}
  >
    <div class="ui-collection-accordion__inner">
      <!-- 도서관 필터 탭 -->
      <UiTab
        tabs={tabs}
        variant="default"
        size="medium"
        showCount={false}
        className={`mb-4 search-type-tabs ${tabsClassName || ''}`}
      />

      <!-- 소장정보 테이블 -->
      <UiTable
        columns={columns}
        rows={rows}
        caption="소장정보 목록"
        showIndex={false}
        showCheckbox={false}
        stickyHeader={true}
        maxHeight="270px"
      />
    </div>
  </div>
</div>

<script is:inline define:vars={{ accordionId, iconType }}>
  // UiCollectionAccordion 초기화
  (function(accordionId, iconType) {
    function initAccordion() {
      console.log('Initializing accordion:', accordionId, 'iconType:', iconType);
      
      const accordion = document.querySelector(`[data-accordion-id="${accordionId}"]`);
      if (!accordion) {
        console.error('Accordion not found:', accordionId);
        return;
      }

      const trigger = accordion.querySelector('.ui-collection-accordion__trigger');
      const content = accordion.querySelector('.ui-collection-accordion__content');
      const tabsContainer = accordion.querySelector('.ui-tabs');

      if (!trigger || !content) {
        console.error('Accordion trigger or content not found');
        return;
      }

      // 이미 이벤트가 등록되었는지 확인
      if (trigger.hasAttribute('data-accordion-initialized')) {
        console.log('Accordion already initialized');
        return;
      }
      trigger.setAttribute('data-accordion-initialized', 'true');

      console.log('Setting up accordion events');

      // 아이콘 타입에 따른 클릭 동작 구분
      trigger.addEventListener('click', function (e) {
        console.log('Accordion trigger clicked, iconType:', iconType);
        e.preventDefault();

        if (iconType === 'close') {
          console.log('Closing accordion (X button)');
          // X 아이콘인 경우: 전체 아코디언을 완전히 숨김
          accordion.style.display = 'none';

          // 만약 특정 래퍼가 있다면 그것도 숨김 (기존 로직 유지)
          const wrapper = accordion.closest('.ui-book-card__collection-wrapper');
          if (wrapper) {
            wrapper.style.display = 'none';
          }
        } else {
          console.log('Toggling accordion (arrow button)');
          // 화살표 아이콘인 경우: 아코디언 토글 동작
          const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
          const newExpanded = !isExpanded;

          trigger.setAttribute('aria-expanded', newExpanded.toString());
          content.setAttribute('data-expanded', newExpanded.toString());

          if (newExpanded) {
            content.style.maxHeight = content.scrollHeight + 'px';
            console.log('Accordion expanded, height:', content.scrollHeight);
          } else {
            content.style.maxHeight = '0';
            console.log('Accordion collapsed');
          }
        }
      });

      // 초기 상태 설정
      if (content.getAttribute('data-expanded') === 'true') {
        content.style.maxHeight = content.scrollHeight + 'px';
        console.log('Initial expanded state set, height:', content.scrollHeight);
      } else {
        content.style.maxHeight = 'max-content';
        console.log('Initial collapsed state set');
      }

      // 탭 변경 이벤트 처리
      if (tabsContainer) {
        tabsContainer.addEventListener('tabchange', function(event) {
          const selectedLibrary = event.detail.activeTab;
          console.log('Selected library:', selectedLibrary);

          // TODO: 실제로는 선택된 도서관에 따라 테이블 데이터 필터링
          // 예: filterCollectionsByLibrary(selectedLibrary);
        });
      }

      console.log('Accordion initialization complete');
    }

    // DOM이 준비되었는지 확인하고 초기화
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initAccordion);
    } else {
      initAccordion();
    }

    // 안전장치: 페이지 로드 후에도 실행
    window.addEventListener('load', function() {
      setTimeout(initAccordion, 200);
    });

  })(accordionId, iconType);
</script>

<style lang="scss">
  @use '@styles/abstracts' as *;

  .ui-collection-accordion {
    border: 1px solid #e5e5e5;
    border-radius: to-rem(8);
    background: white;
    margin-bottom: to-rem(16);

    &.custom-accordion {
      display: block !important;
      border: none;
      border-radius: 0;
      background: none;
      padding: 0;
      border-bottom: 1px solid #e5e7eb;
      margin-bottom: to-rem(40);

      .ui-collection-accordion__inner {
        padding: 0 1px;
      }
      .ui-collection-accordion__trigger {
        justify-content: flex-start;
        padding: 0;
        margin-bottom: to-rem(24);
      }
      .ui-collection-accordion__trigger-content {
        flex: none;
      }
      .ui-collection-accordion__icon {
        margin-left: 5px;
      }
      .ui-collection-accordion__title {
        font-size: to-rem(24);
        font-weight: 700;
        color: #000;
        position: relative;
        padding-left: to-rem(40);
        margin-right: to-rem(5);

        &::before {
          content: '';
          @include position(absolute, 50%, 0, 0, 0);
          transform: translateY(-50%);
          @include icon('book', to-rem(30), to-rem(22));
        }
      }
    }

    &__trigger {
      display: flex;
      align-items: center;
      justify-content: space-between;
      width: 100%;
      padding: to-rem(16) to-rem(20);
      background: none;
      border: none;
      cursor: pointer;

      &[aria-expanded='true'] {
        .icon-arrow-down {
          transform: rotate(180deg);
        }

        .icon-close {
          transform: none;
        }
      }
    }

    &__trigger-content {
      display: flex;
      align-items: center;
      gap: to-rem(8);
      flex: 1;
    }

    &__title {
      font-size: to-rem(16);
      font-weight: 600;
      color: #333;
      text-align: left;
    }

    &__count {
      font-size: to-rem(14);
      color: #666;
    }

    &__icon {
      color: #666;
      transition: transform 0.2s ease;
      flex-shrink: 0;

      &--close {
        color: #999;

        &:hover {
          color: #666;
        }
      }
    }

    // 아이콘 회전 애니메이션
    .icon-arrow-down {
      transition: transform 0.3s ease;
    }

    .icon-close {
      transition: transform 0.3s ease;
    }

    &__content {
      overflow: hidden;
      transition: max-height 0.3s ease;
      max-height: 0;

      &[data-expanded='true'] {
        max-height: 1000px; // 충분한 높이 설정
      }
    }

    &__inner {
      padding: to-rem(0) to-rem(20);
    }

    &__book-title {
      margin-bottom: to-rem(20);

      h4 {
        font-size: to-rem(18);
        font-weight: 600;
        color: #333;
        margin: 0;
      }
    }

    &__tabs {
      margin-bottom: to-rem(16);
    }

    &__notice {
      margin-bottom: to-rem(20);
      padding: to-rem(12);
      background-color: #f8f9fa;
      border-radius: to-rem(4);

      ul {
        margin: 0;
        padding: 0;
        list-style: none;
      }

      li {
        font-size: to-rem(12);
        color: #666;
        line-height: 1.4;

        &:not(:last-child) {
          margin-bottom: to-rem(4);
        }
      }
    }

    &__table-wrapper {
      margin-top: to-rem(20);
      overflow-x: auto;
      border: 1px solid #e5e5e5;
      border-radius: to-rem(4);
    }

    &__table {
      width: 100%;
      min-width: to-rem(800);
      border-collapse: collapse;

      th,
      td {
        padding: to-rem(12) to-rem(8);
        text-align: left;
        border-bottom: 1px solid #e5e5e5;
        font-size: to-rem(14);
        vertical-align: middle;
      }

      th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #333;
        white-space: nowrap;
      }

      tbody tr:last-child {
        th,
        td {
          border-bottom: none;
        }
      }

      .library-info {
        .library-name {
          display: block;
          font-weight: 600;
          margin-bottom: to-rem(2);
          color: #333;
        }

        .reading-room {
          display: block;
          font-size: to-rem(12);
          color: #666;
        }
      }

      .loan-status {
        .status-text {
          display: block;
          font-weight: 500;
          margin-bottom: to-rem(2);
        }

        .reservation-info {
          display: block;
          font-size: to-rem(12);
          color: #666;
        }
      }

      .return-date {
        color: #666;
      }

      .service-button {
        padding: to-rem(6) to-rem(12);
        border: 1px solid;
        border-radius: to-rem(4);
        font-size: to-rem(12);
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;

        &--reservation {
          background: #007bff;
          border-color: #007bff;
          color: white;

          &:hover {
            background: #0056b3;
            border-color: #0056b3;
          }
        }

        &--interlibrary {
          background: #28a745;
          border-color: #28a745;
          color: white;

          &:hover {
            background: #1e7e34;
            border-color: #1e7e34;
          }
        }
      }

      .call-number,
      .registration-number {
        font-family: monospace;
        font-size: to-rem(12);
        color: #666;
      }

      .print-button {
        display: flex;
        align-items: center;
        justify-content: center;
        width: to-rem(36);
        height: to-rem(36);
        background: #f8f9fa;
        border: 1px solid #e5e5e5;
        border-radius: to-rem(4);
        color: #666;
        cursor: pointer;
        transition: all 0.2s ease;

        &:hover {
          background: #e9ecef;
          color: #333;
        }
      }
    }

    // 반응형
    @include mobile {
      &__trigger {
        padding: to-rem(12) to-rem(16);
      }

      &__inner {
        padding: to-rem(16);
      }

      &__table {
        min-width: to-rem(600);

        th,
        td {
          padding: to-rem(8) to-rem(6);
          font-size: to-rem(13);
        }
      }
    }
  }
</style>
