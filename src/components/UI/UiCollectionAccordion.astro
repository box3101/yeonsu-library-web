---
export interface CollectionInfo {
  library: string;
  readingRoom: string;
  loanStatus: string;
  returnDate?: string;
  service: 'reservation' | 'interlibrary';
  callNumber: string;
  registrationNumber: string;
  reservationCount?: number;
}

export interface Props {
  title: string;
  totalCount: number;
  collections: CollectionInfo[];
  libraries: Array<{
    name: string;
    shortName: string;
    count: number;
  }>;
  isExpanded?: boolean;
  iconType?: 'arrow' | 'close'; // 화살표 또는 닫기 아이콘 선택
  className?: string;
}

const {
  title,
  totalCount,
  collections,
  libraries,
  isExpanded = false,
  iconType = 'arrow',
  className = '',
} = Astro.props;

const accordionId = `accordion-${Math.random().toString(36).substr(2, 9)}`;

// 전체 라이브러리 정보 생성
const allLibraries = [
  { name: '전체', shortName: '전체', count: totalCount },
  ...libraries,
];

// UiTabs용 데이터 변환
const tabItems: TabItem[] = allLibraries.map(library => ({
  id: library.shortName,
  label: library.name,
  count: library.count,
}));
---

<div class={`ui-collection-accordion ${className}`}>
  <button
    type="button"
    class="ui-collection-accordion__trigger"
    aria-expanded={isExpanded}
    aria-controls={accordionId}
  >
    <div class="ui-collection-accordion__trigger-content"></div>
    {
      iconType === 'arrow' ? (
        <svg
          class="ui-collection-accordion__icon ui-collection-accordion__icon--arrow"
          width="20"
          height="20"
          viewBox="0 0 20 20"
          fill="none"
        >
          <path
            d="M6 8l4 4 4-4"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      ) : (
        <svg
          class="ui-collection-accordion__icon ui-collection-accordion__icon--close"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
        >
          <path
            d="M6 6L18 18M6 18L18 6"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      )
    }
  </button>

  <div
    id={accordionId}
    class="ui-collection-accordion__content"
    data-expanded={isExpanded}
  >
    <div class="ui-collection-accordion__inner">
      <!-- 도서관 필터 탭 -->
      <UiTab
        tabs={[
          { id: 'all', label: '전체', count: 0, active: true },
          { id: 'book', label: '단행본', count: 0 },
          { id: 'serial', label: '연속간행물', count: 0 },
          { id: 'dvd', label: 'DVD', count: 0 },
          { id: 'ebook', label: '전자책', count: 0 },
        ]}
        variant="default"
        size="medium"
        className="mb-4 search-type-tabs"
      />

      <!-- 소장정보 테이블 -->
      <div class="ui-collection-accordion__table-wrapper">
        <table class="ui-collection-accordion__table">
          <thead>
            <tr>
              <th>도서관</th>
              <th>대출상태</th>
              <th>반납예정일</th>
              <th>서비스</th>
              <th>청구기호</th>
              <th>등록번호</th>
              <th>정보출력</th>
            </tr>
          </thead>
          <tbody>
            {
              collections.map(item => (
                <tr>
                  <td>
                    <div class="library-info">
                      <span class="library-name">[{item.library}]</span>
                      <span class="reading-room">{item.readingRoom}</span>
                    </div>
                  </td>
                  <td>
                    <div class="loan-status">
                      <span class="status-text">{item.loanStatus}</span>
                      {item.reservationCount !== undefined && (
                        <span class="reservation-info">
                          - 예약 {item.reservationCount}명
                        </span>
                      )}
                    </div>
                  </td>
                  <td class="return-date">{item.returnDate || ''}</td>
                  <td>
                    <button
                      type="button"
                      class={`service-button service-button--${item.service}`}
                    >
                      {item.service === 'reservation' ? '예약하기' : '상호대차'}
                    </button>
                  </td>
                  <td class="call-number">{item.callNumber}</td>
                  <td class="registration-number">{item.registrationNumber}</td>
                  <td>
                    <button type="button" class="print-button" title="정보출력">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                      >
                        <path
                          d="M6 9V2H18V9"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M6 18H4C3.44772 18 3 17.5523 3 17V11C3 10.4477 3.44772 10 4 10H20C20.5523 10 21 10.4477 21 11V17C21 17.5523 20.5523 18 20 18H18"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                        <path
                          d="M18 14H6V22H18V14Z"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ accordionId }}>
  document.addEventListener('DOMContentLoaded', function () {
    const accordion = document.querySelector(`.ui-collection-accordion`);
    if (!accordion) return;

    const trigger = accordion.querySelector(
      '.ui-collection-accordion__trigger'
    );
    const content = accordion.querySelector(
      '.ui-collection-accordion__content'
    );
    const tabsContainer = accordion.querySelector('.ui-tabs');

    if (!trigger || !content) return;

    // 아코디언 토글 (X 아이콘일 때는 전체 숨김)
    trigger.addEventListener('click', function () {
      const isCloseIcon = accordion.classList.contains('book-card-accordion');

      if (isCloseIcon) {
        // X 아이콘인 경우: 전체 래퍼를 숨김
        const wrapper = accordion.closest('.ui-book-card__collection-wrapper');
        if (wrapper) {
          wrapper.style.display = 'none';
        }
      } else {
        // 화살표 아이콘인 경우: 기존 토글 동작
        const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
        const newExpanded = !isExpanded;

        trigger.setAttribute('aria-expanded', newExpanded.toString());
        content.dataset.expanded = newExpanded.toString();

        if (newExpanded) {
          content.style.maxHeight = content.scrollHeight + 'px';
        } else {
          content.style.maxHeight = '0';
        }
      }
    });

    // 초기 상태 설정
    if (content.dataset.expanded === 'true') {
      content.style.maxHeight = content.scrollHeight + 'px';
    } else {
      content.style.maxHeight = '0';
    }

    // 탭 변경 이벤트 처리
    if (tabsContainer) {
      tabsContainer.addEventListener('tabchange', event => {
        const selectedLibrary = event.detail.activeTab;
        console.log('Selected library:', selectedLibrary);

        // TODO: 실제로는 선택된 도서관에 따라 테이블 데이터 필터링
        // 예: filterCollectionsByLibrary(selectedLibrary);
      });
    }
  });
</script>

<style lang="scss">
  @use '@styles/abstracts' as *;

  .ui-collection-accordion {
    border: 1px solid #e5e5e5;
    border-radius: to-rem(8);
    background: white;
    margin-bottom: to-rem(16);

    &__trigger {
      display: flex;
      align-items: center;
      justify-content: space-between;
      width: 100%;
      padding: to-rem(16) to-rem(20);
      background: none;
      border: none;
      cursor: pointer;

      &[aria-expanded='true'] {
        .ui-collection-accordion__icon--arrow {
          transform: rotate(180deg);
        }

        .ui-collection-accordion__icon--close {
          transform: none; // 닫기 아이콘은 회전하지 않음
        }
      }
    }

    &__trigger-content {
      display: flex;
      align-items: center;
      gap: to-rem(8);
    }

    &__title {
      font-size: to-rem(16);
      font-weight: 600;
      color: #333;
    }

    &__count {
      font-size: to-rem(14);
      color: #666;
    }

    &__icon {
      color: #666;
      transition: transform 0.2s ease;
      flex-shrink: 0;

      &--close {
        color: #999;

        &:hover {
          color: #666;
        }
      }
    }

    &__content {
      transition: max-height 0.3s ease;
      max-height: max-content !important;

      &[data-expanded='false'] {
        max-height: 526px;
      }
    }

    &__inner {
      padding: to-rem(0) to-rem(20);
    }

    &__book-title {
      margin-bottom: to-rem(20);

      h4 {
        font-size: to-rem(18);
        font-weight: 600;
        color: #333;
        margin: 0;
      }
    }

    &__tabs {
      margin-bottom: to-rem(16);
    }

    &__notice {
      margin-bottom: to-rem(20);
      padding: to-rem(12);
      background-color: #f8f9fa;
      border-radius: to-rem(4);

      ul {
        margin: 0;
        padding: 0;
        list-style: none;
      }

      li {
        font-size: to-rem(12);
        color: #666;
        line-height: 1.4;

        &:not(:last-child) {
          margin-bottom: to-rem(4);
        }
      }
    }

    &__table-wrapper {
      margin-top: to-rem(20);
      overflow-x: auto;
      border: 1px solid #e5e5e5;
      border-radius: to-rem(4);
    }

    &__table {
      width: 100%;
      min-width: to-rem(800);
      border-collapse: collapse;

      th,
      td {
        padding: to-rem(12) to-rem(8);
        text-align: left;
        border-bottom: 1px solid #e5e5e5;
        font-size: to-rem(14);
        vertical-align: middle;
      }

      th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #333;
        white-space: nowrap;
      }

      tbody tr:last-child {
        th,
        td {
          border-bottom: none;
        }
      }

      .library-info {
        .library-name {
          display: block;
          font-weight: 600;
          margin-bottom: to-rem(2);
          color: #333;
        }

        .reading-room {
          display: block;
          font-size: to-rem(12);
          color: #666;
        }
      }

      .loan-status {
        .status-text {
          display: block;
          font-weight: 500;
          margin-bottom: to-rem(2);
        }

        .reservation-info {
          display: block;
          font-size: to-rem(12);
          color: #666;
        }
      }

      .return-date {
        color: #666;
      }

      .service-button {
        padding: to-rem(6) to-rem(12);
        border: 1px solid;
        border-radius: to-rem(4);
        font-size: to-rem(12);
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;

        &--reservation {
          background: #007bff;
          border-color: #007bff;
          color: white;

          &:hover {
            background: #0056b3;
            border-color: #0056b3;
          }
        }

        &--interlibrary {
          background: #28a745;
          border-color: #28a745;
          color: white;

          &:hover {
            background: #1e7e34;
            border-color: #1e7e34;
          }
        }
      }

      .call-number,
      .registration-number {
        font-family: monospace;
        font-size: to-rem(12);
        color: #666;
      }

      .print-button {
        display: flex;
        align-items: center;
        justify-content: center;
        width: to-rem(36);
        height: to-rem(36);
        background: #f8f9fa;
        border: 1px solid #e5e5e5;
        border-radius: to-rem(4);
        color: #666;
        cursor: pointer;
        transition: all 0.2s ease;

        &:hover {
          background: #e9ecef;
          color: #333;
        }
      }
    }

    // 반응형
    @include mobile {
      &__trigger {
        padding: to-rem(12) to-rem(16);
      }

      &__inner {
        padding: to-rem(16);
      }

      &__table {
        min-width: to-rem(600);

        th,
        td {
          padding: to-rem(8) to-rem(6);
          font-size: to-rem(13);
        }
      }
    }
  }
</style>
