---
import {
  UiCheckbox,
  UiInput,
  UiButton,
  UiTab,
  UiSwitch,
  UiKeyboard,
} from '@components';

export interface LibraryItem {
  id: string;
  name: string;
  checked?: boolean;
}

export interface Props {
  title?: string;
  subtitle?: string;
  libraries: LibraryItem[];
  allChecked?: boolean;
  expanded?: boolean;
  gridColumns?: number;
  class?: string;
}

const {
  title = '전체도서관',
  subtitle = '도서관 분류',
  libraries = [],
  allChecked = false,
  expanded = true,
  gridColumns = 4,
  class: className = '',
} = Astro.props;

const filterId = `filter-${Math.random().toString(36).substr(2, 9)}`;
const toggleId = `toggle-${filterId}`;
const searchDropdownId = `search-dropdown-${filterId}`;

// 검색 탭 데이터
const searchTabs = [
  { id: 'recent', label: '최근검색어', active: true },
  { id: 'popular', label: '인기검색어', active: false },
];

// 최근 검색어 데이터 (예시)
const recentSearches = [
  { term: '홍길동', date: '25.07.07', isRecent: true },
  { term: '바나나', date: '25.07.07', isRecent: false },
  { term: '홍시', date: '25.07.07', isRecent: false },
  { term: '사과', date: '25.07.07', isRecent: false },
  { term: '명탐서점', date: '25.07.07', isRecent: false },
];

// 인기 검색어 데이터 (예시)
const popularSearches = [
  { term: '파이썬', rank: 1 },
  { term: '자바스크립트', rank: 2 },
  { term: '리액트', rank: 3 },
  { term: '노드js', rank: 4 },
  { term: '타입스크립트', rank: 5 },
];
---

<section class={`ui-library-filter ${className}`}>
  <div class="ui-library-filter__box">
    <div class="ui-library-filter__header">
      <div class="ui-library-filter__main-control">
        <UiCheckbox
          id={`all-${filterId}`}
          name={`all-${filterId}`}
          label={title}
          checked={allChecked}
          class="ui-library-filter__main-checkbox"
        />
        <button
          type="button"
          class="ui-library-filter__toggle"
          id={toggleId}
          aria-expanded={expanded}
          aria-controls={`content-${filterId}`}
        >
          <svg
            width="18"
            height="18"
            viewBox="0 0 20 20"
            fill="none"
            class="ui-library-filter__toggle-icon"
          >
            <path
              d="M6 8l4 4 4-4"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"></path>
          </svg>
        </button>
      </div>
    </div>
    <!-- 체크박스들 -->
    <div
      class="ui-library-filter__content"
      id={`content-${filterId}`}
      data-expanded={expanded}
    >
      <div class="ui-library-filter__subtitle">
        {subtitle}
      </div>
      <div
        class="ui-library-filter__grid"
        style={`grid-template-columns: repeat(${gridColumns}, 1fr);`}
      >
        {
          libraries.map(library => (
            <div class="ui-library-filter__item">
              <UiCheckbox
                id={`library-${library.id}`}
                name={`library-${library.id}`}
                value={library.id}
                label={library.name}
                checked={library.checked || false}
                size="medium"
                class="ui-library-filter__item-checkbox"
              />
            </div>
          ))
        }
      </div>
    </div>

    <!-- 검색어, 다국어입력기, 검색, 고급검색 -->
    <div class="ui-library-filter__search flex gap-8 mt25">
      <div class="flex-1">
        <UiInput
          id="search"
          name="search"
          placeholder="검색어를 입력해주세요."
          size="medium"
          clearable={true}
          class="ui-library-filter__search-input"
        />
      </div>
      <!-- 검색어 드롭다운 -->
      <div class="ui-library-filter__search-dropdown" id={searchDropdownId}>
        <!-- 탭 버튼 -->
        <div class="ui-library-filter__search-tabs">
          {
            searchTabs.map(tab => (
              <button
                type="button"
                class={`search-tab-button ${tab.active ? 'active' : ''}`}
                data-tab={tab.id}
                data-active={tab.active}
              >
                {tab.label}
              </button>
            ))
          }
        </div>

        <!-- 검색어 목록 -->
        <div class="ui-library-filter__search-list">
          <!-- 최근 검색어 -->
          <div
            id="recent-searches"
            class={`search-content ${searchTabs[0].active ? 'active' : ''}`}
          >
            {
              recentSearches.map(search => (
                <div class="search-item" data-term={search.term}>
                  <span
                    class={`search-term ${search.isRecent ? 'is-recent' : ''}`}
                  >
                    {search.term}
                  </span>
                  <span class="search-date">{search.date}</span>
                </div>
              ))
            }
          </div>

          <!-- 인기 검색어 -->
          <div
            id="popular-searches"
            class={`search-content ${searchTabs[1].active ? 'active' : ''}`}
          >
            {
              popularSearches.map(search => (
                <div class="search-item" data-term={search.term}>
                  <span class="search-term">{search.term}</span>
                  <span class="search-rank">{search.rank}</span>
                </div>
              ))
            }
          </div>
        </div>

        <!-- 하단 옵션 -->
        <div class="ui-library-filter__search-options">
          <div class="option-item">
            <UiSwitch
              id="search-save-toggle"
              size="small"
              checked={false}
              label="검색어 저장"
              labelPosition="right"
            />
          </div>
          <UiSwitch
            id="search-save-toggle"
            size="small"
            checked={false}
            label="자동완성 켜기"
            labelPosition="right"
          />
        </div>
      </div>

      <div class="flex gap-5">
        <div class="ui-keyboard-container">
          <UiButton
            text="다국어입력기"
            size="medium"
            icon="icon-language icon-white"
            iconPosition="left"
            class="ui-library-filter__search-button ui-keyboard-trigger"
          />
          <UiKeyboard
            id="search-keyboard"
            targetInputId="search"
            class="ui-search-keyboard"
          />
        </div>
        <UiButton
          text="검색"
          variant="darkBlue"
          size="medium"
          class="ui-library-filter__search-button"
        />
        <UiButton
          text="고급검색"
          variant="darkBlue"
          icon="icon-advanced-search"
          iconPosition="left"
          size="medium"
          class="ui-library-filter__search-button"
        />
      </div>
    </div>

    <!-- 결과내 재검색 -->
    <div class="ui-library-filter__search-result">
      <UiCheckbox
        name="checkbox-name"
        label="결과내재검색"
        checked={false}
        id="search-result-checkbox"
      />
    </div>
  </div>
</section>

<script define:vars={{ filterId, toggleId, searchDropdownId }}>
  document.addEventListener('DOMContentLoaded', function () {
    const toggle = document.getElementById(toggleId);
    const content = document.getElementById(`content-${filterId}`);
    const mainCheckbox = document.getElementById(`all-${filterId}`);
    const searchInput = document.querySelector('#search');
    const searchDropdown = document.getElementById(searchDropdownId);
    const searchTabs = document.querySelectorAll('.search-tab-button');
    const searchContents = document.querySelectorAll('.search-content');
    const searchItems = document.querySelectorAll('.search-item');
    const keyboardTrigger = document.querySelector('.ui-keyboard-trigger');

    if (!toggle || !content || !mainCheckbox) return;

    // Toggle functionality
    toggle.addEventListener('click', function () {
      const isExpanded = content.dataset.expanded === 'true';
      const newExpanded = !isExpanded;

      content.dataset.expanded = newExpanded.toString();
      toggle.setAttribute('aria-expanded', newExpanded.toString());

      if (newExpanded) {
        content.style.maxHeight = content.scrollHeight + 'px';
      } else {
        content.style.maxHeight = '0';
      }
    });

    // Set initial state
    if (content.dataset.expanded === 'true') {
      content.style.maxHeight = content.scrollHeight + 'px';
    } else {
      content.style.maxHeight = '0';
    }

    // Main checkbox functionality
    mainCheckbox.addEventListener('change', function () {
      const libraryCheckboxes = content.querySelectorAll(
        '.ui-library-filter__item-checkbox input[type="checkbox"]'
      );
      libraryCheckboxes.forEach(checkbox => {
        checkbox.checked = mainCheckbox.checked;
      });
    });

    // Individual checkbox functionality
    const libraryCheckboxes = content.querySelectorAll(
      '.ui-library-filter__item-checkbox input[type="checkbox"]'
    );
    libraryCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function () {
        const totalCheckboxes = libraryCheckboxes.length;
        const checkedCheckboxes = content.querySelectorAll(
          '.ui-library-filter__item-checkbox input[type="checkbox"]:checked'
        ).length;

        if (checkedCheckboxes === totalCheckboxes) {
          mainCheckbox.checked = true;
          mainCheckbox.indeterminate = false;
        } else if (checkedCheckboxes === 0) {
          mainCheckbox.checked = false;
          mainCheckbox.indeterminate = false;
        } else {
          mainCheckbox.checked = false;
          mainCheckbox.indeterminate = true;
        }
      });
    });

    // Initialize main checkbox state
    const initialChecked = content.querySelectorAll(
      '.ui-library-filter__item-checkbox input[type="checkbox"]:checked'
    ).length;
    const totalLibraries = libraryCheckboxes.length;

    if (initialChecked === totalLibraries && totalLibraries > 0) {
      mainCheckbox.checked = true;
    } else if (initialChecked > 0) {
      mainCheckbox.indeterminate = true;
    }

    // 검색어 드롭다운 기능
    if (searchInput && searchDropdown) {
      // 검색 입력 시 드롭다운 표시
      searchInput.addEventListener('focus', function () {
        searchDropdown.classList.add('is-open');
      });

      // 검색 입력 포커스 벗어날 때 드롭다운 숨기기 (딜레이 추가)
      searchInput.addEventListener('blur', function () {
        setTimeout(() => {
          searchDropdown.classList.remove('is-open');
        }, 200);
      });

      // 드롭다운 내부 클릭 시 포커스 유지
      searchDropdown.addEventListener('mousedown', function (e) {
        e.preventDefault();
      });
    }

    // 탭 기능
    searchTabs.forEach(tab => {
      tab.addEventListener('click', function () {
        const targetTab = this.dataset.tab;

        // 모든 탭 비활성화
        searchTabs.forEach(t => {
          t.classList.remove('active');
          t.dataset.active = 'false';
        });

        // 현재 탭 활성화
        this.classList.add('active');
        this.dataset.active = 'true';

        // 모든 컨텐츠 숨기기
        searchContents.forEach(content => {
          content.classList.remove('active');
        });

        // 선택된 컨텐츠 표시
        const targetContent = document.getElementById(`${targetTab}-searches`);
        if (targetContent) {
          targetContent.classList.add('active');
        }
      });
    });

    // 다국어입력기 버튼 클릭 이벤트
    if (keyboardTrigger) {
      keyboardTrigger.addEventListener('click', function (e) {
        e.preventDefault();
        // 전역 함수 호출로 키보드 열기
        if (typeof window.openKeyboard === 'function') {
          window.openKeyboard();
        }
      });
    }

    // ESC 키로 드롭다운 닫기
    document.addEventListener('keydown', function (e) {
      if (
        e.key === 'Escape' &&
        searchDropdown &&
        searchDropdown.classList.contains('is-open')
      ) {
        searchDropdown.classList.remove('is-open');
        if (searchInput) {
          searchInput.focus();
        }
      }
    });
  });
</script>

<style lang="scss">
  @use '@styles/abstracts' as *;

  .ui-keyboard-container {
    position: relative;
  }

  .ui-search-keyboard {
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 1000;
  }
</style>
