---
import UiCheckbox from './UiCheckbox.astro';
import UiInput from './UiInput.astro';
import UiButton from './UiButton.astro';
import UiTab from './UiTab.astro';
import UiSwitch from './UiSwitch.astro';
import UiKeyboard from './UiKeyboard.astro';

export interface LibraryItem {
  id: string;
  name: string;
  checked?: boolean;
}

export interface Props {
  title?: string;
  subtitle?: string;
  libraries: LibraryItem[];
  allChecked?: boolean;
  expanded?: boolean;
  gridColumns?: number;
  class?: string;
}

const { title = '전체도서관', subtitle = '도서관 분류', libraries = [], allChecked = false, expanded = true, gridColumns = 4, class: className = '' } = Astro.props;

const filterId = `filter-${Math.random().toString(36).substr(2, 9)}`;
const toggleId = `toggle-${filterId}`;
const searchDropdownId = `search-dropdown-${filterId}`;

// 검색 탭 데이터
const searchTabs = [
  { id: 'recent', label: '최근검색어', active: true },
  { id: 'popular', label: '인기검색어', active: false },
];

// 최근 검색어 데이터 (예시)
const recentSearches = [
  { term: '홍길동', date: '25.07.07', isRecent: true },
  { term: '바나나', date: '25.07.07', isRecent: false },
  { term: '홍시', date: '25.07.07', isRecent: false },
  { term: '사과', date: '25.07.07', isRecent: false },
  { term: '명탐서점', date: '25.07.07', isRecent: false },
];

// 인기 검색어 데이터 (예시)
const popularSearches = [
  { term: '파이썬', rank: 1 },
  { term: '자바스크립트', rank: 2 },
  { term: '리액트', rank: 3 },
  { term: '노드js', rank: 4 },
  { term: '타입스크립트', rank: 5 },
];
---

<section class={`ui-library-filter ${className}`} data-library-filter>
  <div class="ui-library-filter__box">
    <div class="ui-library-filter__header">
      <div class="ui-library-filter__main-control">
        <UiCheckbox id={`all-${filterId}`} name={`all-${filterId}`} label={title} checked={allChecked} size="large" class="ui-library-filter__main-checkbox" />
        <button type="button" class="ui-library-filter__toggle" data-toggle="menu-1" id={toggleId} aria-expanded={expanded} aria-controls={`content-${filterId}`}>
          <svg width="18" height="18" viewBox="0 0 20 20" fill="none" class="ui-library-filter__toggle-icon">
            <path d="M6 8l4 4 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
          </svg>
        </button>
      </div>
    </div>
    <!-- 체크박스들 -->
    <div class="ui-library-filter__content" id={`content-${filterId}`} data-toggle-target="menu-1" data-expanded={expanded}>
      <div class="ui-library-filter__subtitle">
        {subtitle}
      </div>
      <div class="ui-library-filter__grid" style={`grid-template-columns: repeat(${gridColumns}, 1fr);`}>
        {
          libraries.map(library => (
            <div class="ui-library-filter__item">
              <UiCheckbox
                id={`library-${library.id}`}
                name={`library-${library.id}`}
                value={library.id}
                label={library.name}
                checked={library.checked || false}
                size="medium"
                class="ui-library-filter__item-checkbox"
              />
            </div>
          ))
        }
      </div>
    </div>

    <!-- 검색어, 다국어입력기, 검색, 고급검색 -->
    <div class="ui-library-filter__search flex gap-8 mt10">
      <div class="flex-1">
        <UiInput id="search" name="search" placeholder="검색어를 입력해주세요." size="medium" clearable={true} class="ui-library-filter__search-input" />
      </div>
      <!-- 검색어 드롭다운 -->
      <div class="ui-library-filter__search-dropdown" id={searchDropdownId}>
        <!-- 탭 버튼 -->
        <div class="ui-library-filter__search-tabs">
          {
            searchTabs.map(tab => (
              <button type="button" class={`search-tab-button ${tab.active ? 'active' : ''}`} data-tab={tab.id} data-active={tab.active}>
                {tab.label}
              </button>
            ))
          }
        </div>

        <!-- 검색어 목록 -->
        <div class="ui-library-filter__search-list">
          <!-- 최근 검색어 -->
          <div id="recent-searches" class={`search-content ${searchTabs[0].active ? 'active' : ''}`}>
            {
              recentSearches.map(search => (
                <div class="search-item" data-term={search.term}>
                  <span class={`search-term ${search.isRecent ? 'is-recent' : ''}`}>{search.term}</span>
                  <span class="search-date">{search.date}</span>
                </div>
              ))
            }
          </div>

          <!-- 인기 검색어 -->
          <div id="popular-searches" class={`search-content ${searchTabs[1].active ? 'active' : ''}`}>
            {
              popularSearches.map(search => (
                <div class="search-item" data-term={search.term}>
                  <span class="search-term">{search.term}</span>
                  <span class="search-rank">{search.rank}</span>
                </div>
              ))
            }
          </div>
        </div>

        <!-- 하단 옵션 -->
        <div class="ui-library-filter__search-options">
          <div class="option-item">
            <UiSwitch id={`search-save-toggle-${filterId}`} size="small" checked={false} label="검색어 저장" labelPosition="right" />
          </div>
          <UiSwitch id={`search-autocomplete-toggle-${filterId}`} size="small" checked={false} label="자동완성 켜기" labelPosition="right" />
        </div>
      </div>

      <div class="flex gap-5">
        <div class="ui-keyboard-container">
          <UiButton text="다국어입력기" size="medium" icon="icon-language icon-white" iconPosition="left" class="ui-library-filter__search-button ui-keyboard-trigger" />
          <UiKeyboard id="search-keyboard" targetInputId="search" class="ui-search-keyboard" />
        </div>
        <UiButton text="검색" variant="darkBlue" size="medium" class="ui-library-filter__search-button" />
        <UiButton text="고급검색" variant="darkBlue" icon="icon-search-advanced" iconPosition="left" size="medium" class="ui-library-filter__search-button" href="/01-2.소장도서검색_고급검색" />
      </div>
    </div>

    <!-- 결과내 재검색 -->
    <div class="ui-library-filter__search-result">
      <UiCheckbox name="checkbox-name" label="결과내재검색" checked={false} id="search-result-checkbox" />
    </div>
  </div>
</section>

<script is:inline define:vars={{ filterId, toggleId, searchDropdownId }}>
  /**
   * 도서관 필터 인라인 스크립트
   * - 토글 문제 해결
   * - CSS와 JS 동기화
   */
  (function (filterId, toggleId, searchDropdownId) {
    'use strict';

    // DOM 로드 완료 후 실행
    function initLibraryFilter() {
      // ==========================================
      // 유틸리티 함수
      // ==========================================
      const $ = (selector, context = document) => context.querySelector(selector);
      const $$ = (selector, context = document) => context.querySelectorAll(selector);

      // ==========================================
      // 체크박스 기능
      // ==========================================
      function initCheckboxes() {
        const mainCheckbox = document.getElementById(`all-${filterId}`);
        const content = document.getElementById(`content-${filterId}`);

        if (!mainCheckbox || !content) {
          return;
        }

        const itemCheckboxes = content.querySelectorAll('input[type="checkbox"]');

        // 전체 선택
        mainCheckbox.addEventListener('change', () => {
          itemCheckboxes.forEach(cb => {
            cb.checked = mainCheckbox.checked;
          });
        });

        // 개별 선택
        itemCheckboxes.forEach(checkbox => {
          checkbox.addEventListener('change', () => {
            const checkedCount = content.querySelectorAll('input[type="checkbox"]:checked').length;
            const totalCount = itemCheckboxes.length;

            if (checkedCount === totalCount) {
              mainCheckbox.checked = true;
              mainCheckbox.indeterminate = false;
            } else if (checkedCount === 0) {
              mainCheckbox.checked = false;
              mainCheckbox.indeterminate = false;
            } else {
              mainCheckbox.checked = false;
              mainCheckbox.indeterminate = true;
            }
          });
        });

        // 초기 상태 설정
        const initialChecked = content.querySelectorAll('input[type="checkbox"]:checked').length;
        if (initialChecked === itemCheckboxes.length && itemCheckboxes.length > 0) {
          mainCheckbox.checked = true;
        } else if (initialChecked > 0) {
          mainCheckbox.indeterminate = true;
        }
      }

      // ==========================================
      // 검색 드롭다운 기능
      // ==========================================
      function initSearchDropdown() {
        const searchInput = document.getElementById('search');
        const dropdown = document.getElementById(searchDropdownId);

        if (!searchInput || !dropdown) {
          return;
        }

        // 포커스 시 열기
        searchInput.addEventListener('focus', () => {
          dropdown.classList.add('is-open');
        });

        // 포커스 벗어날 때 닫기
        searchInput.addEventListener('blur', e => {
          // 드롭다운 내부 클릭 시에는 닫지 않음
          if (!dropdown.contains(e.relatedTarget)) {
            setTimeout(() => {
              dropdown.classList.remove('is-open');
            }, 200);
          }
        });

        // 드롭다운 클릭 시 포커스 유지
        dropdown.addEventListener('mousedown', e => {
          e.preventDefault();
        });

        // 탭 기능
        const tabButtons = dropdown.querySelectorAll('.search-tab-button');
        tabButtons.forEach(tab => {
          tab.addEventListener('click', function () {
            // 모든 탭 비활성화
            tabButtons.forEach(t => {
              t.classList.remove('active');
              t.dataset.active = 'false';
            });

            // 현재 탭 활성화
            this.classList.add('active');
            this.dataset.active = 'true';

            // 컨텐츠 전환
            const targetTab = this.dataset.tab;
            const allContents = dropdown.querySelectorAll('.search-content');
            allContents.forEach(content => {
              content.classList.remove('active');
            });

            const targetContent = document.getElementById(`${targetTab}-searches`);
            if (targetContent) {
              targetContent.classList.add('active');
            }
          });
        });

        // 검색어 항목 클릭
        const searchItems = dropdown.querySelectorAll('.search-item');
        searchItems.forEach(item => {
          item.addEventListener('click', () => {
            const term = item.dataset.term;
            searchInput.value = term;
            dropdown.classList.remove('is-open');
          });
        });
      }

      // ==========================================
      // 다국어 키보드 기능
      // ==========================================
      function initKeyboard() {
        const keyboardTriggers = document.querySelectorAll('.ui-keyboard-trigger');
        keyboardTriggers.forEach(trigger => {
          trigger.addEventListener('click', e => {
            e.preventDefault();
            if (typeof window.openKeyboard === 'function') {
              window.openKeyboard();
            } else {
            }
          });
        });
      }

      // ==========================================
      // ESC 키 핸들러
      // ==========================================
      function initEscapeHandler() {
        document.addEventListener('keydown', e => {
          if (e.key === 'Escape') {
            const dropdown = document.getElementById(searchDropdownId);
            if (dropdown && dropdown.classList.contains('is-open')) {
              dropdown.classList.remove('is-open');
            }
          }
        });
      }

      // ==========================================
      // 전체 초기화 실행
      // ==========================================
      try {
        initToggle();
        initCheckboxes();
        initSearchDropdown();
        initKeyboard();
        initEscapeHandler();
      } catch (error) {}
    }

    // DOM 준비 상태 확인 후 실행
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initLibraryFilter);
    } else {
      // 이미 로드된 경우 즉시 실행
      setTimeout(initLibraryFilter, 0);
    }

    // 추가 안전장치: window load 이벤트에서도 실행
    window.addEventListener('load', () => {
      setTimeout(initLibraryFilter, 100);
    });
  })(filterId, toggleId, searchDropdownId);
</script>
