---
export interface Props {
  text?: string;
  variant?: 'primary' | 'secondary' | 'tertiary' | 'darkBlue' | 'darkGray' | 'text' | 'ghost';
  size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
  width?: string;
  height?: string;
  disabled?: boolean;
  loading?: boolean;
  href?: string;
  target?: string;
  icon?: string;
  iconPosition?: 'left' | 'right';
  iconOnly?: boolean;
  class?: string;
  // 👇 모달 관련 속성들 추가
  'data-modal-open'?: string;
  'data-modal-close'?: boolean;
  'data-modal-confirm'?: boolean;
}

const {
  text = '버튼',
  variant = 'primary',
  size = 'medium',
  width,
  height,
  disabled = false,
  loading = false,
  href,
  target,
  icon,
  iconPosition = 'right',
  iconOnly = false,
  class: className = '',
  // 👇 모달 관련 속성들 처리
  'data-modal-open': dataModalOpen,
  'data-modal-close': dataModalClose,
  'data-modal-confirm': dataModalConfirm,
} = Astro.props;

const Tag = href ? 'a' : 'button';
const linkProps = href ? { href, target } : {};
const buttonProps = href
  ? {}
  : {
      type: 'button',
      disabled: disabled || loading,
      // 모달 관련 데이터 속성들 추가
      ...(dataModalOpen && { 'data-modal-open': dataModalOpen }),
      ...(dataModalClose && { 'data-modal-close': '' }),
      ...(dataModalConfirm && { 'data-modal-confirm': '' }),
    };

const hasIcon = icon && icon.length > 0;
const hasText = text && text.length > 0 && !iconOnly;

const buttonClasses = [
  'ui-button',
  `ui-button--${variant}`,
  `ui-button--${size}`,
  iconOnly ? 'ui-button--icon-only' : '',
  loading ? 'ui-button--loading' : '',
  disabled ? 'ui-button--disabled' : '',
  className,
]
  .filter(Boolean)
  .join(' ');

const buttonStyle = [
  width ? `width: ${typeof width === 'number' ? width + 'px' : width}` : '',
  height ? `height: ${typeof height === 'number' ? height + 'px' : height}` : '',
]
  .filter(Boolean)
  .join('; ');
---

<Tag class={buttonClasses} style={buttonStyle || undefined} aria-disabled={disabled || loading} {...linkProps} {...buttonProps}>
  {
    loading && (
      <div class="ui-button__spinner">
        <svg class="ui-button__spinner-icon" viewBox="0 0 24 24">
          <circle
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="2"
            fill="none"
            stroke-linecap="round"
            stroke-dasharray="32"
            stroke-dashoffset="32"
          >
            <animate attributeName="stroke-dashoffset" dur="1s" values="32;0;32" repeatCount="indefinite" />
          </circle>
        </svg>
      </div>
    )
  }

  {
    hasIcon && iconPosition === 'left' && !loading && (
      <div class="ui-button__icon ui-button__icon--left">
        <img src={`./assets/images/icon/${icon}.svg`} class="icon icon-md" />
      </div>
    )
  }

  {hasText && <span class="ui-button__text">{text}</span>}

  {
    hasIcon && iconPosition === 'right' && !loading && (
      <div class="ui-button__icon ui-button__icon--right">
        <img src={`./assets/images/icon/${icon}.svg`} class="icon icon-sm" />
      </div>
    )
  }
</Tag>
