---
export interface Props {
	text?: string;
	variant?: 'primary' | 'secondary' | 'tertiary' | 'darkBlue' | 'darkGray' | 'gray' | 'text' | 'ghost';
	size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
	width?: string;
	height?: string;
	disabled?: boolean;
	loading?: boolean;
	href?: string;
	target?: string;
	icon?: string;
	iconAddClass?: string;
	iconPosition?: 'left' | 'right';
	iconOnly?: boolean;
	class?: string;
	// 👇 모달 관련 속성들 추가
	'data-modal-open'?: string;
	'data-modal-close'?: boolean;
	'data-modal-confirm'?: boolean;
	// 👇 onclick 이벤트 추가
	onclick?: string;
}

const {
	text = '버튼',
	variant = 'primary',
	size = 'medium',
	width,
	height,
	disabled = false,
	loading = false,
	href,
	target,
	icon,
	iconAddClass,
	iconPosition = 'right',
	iconOnly = false,
	class: className = '',
	// 👇 모달 관련 속성들 처리
	'data-modal-open': dataModalOpen,
	'data-modal-close': dataModalClose,
	'data-modal-confirm': dataModalConfirm,
	// 👇 onclick 이벤트 처리
	onclick,
} = Astro.props;

const Tag = href ? 'a' : 'button';
const linkProps = href ? { href, target } : {};
const buttonProps = href
	? {}
	: {
			type: 'button',
			disabled: disabled || loading,
			// 모달 관련 데이터 속성들 추가
			...(dataModalOpen && { 'data-modal-open': dataModalOpen }),
			...(dataModalClose && { 'data-modal-close': '' }),
			...(dataModalConfirm && { 'data-modal-confirm': '' }),
			// onclick 이벤트 추가
			...(onclick && { onclick }),
	  };

const hasIcon = icon && icon.length > 0;
const hasText = text && text.length > 0 && !iconOnly;

// 동적 크기를 클래스로 변환
const getSizeClass = value => {
	if (!value) return '';
	const numValue = typeof value === 'number' ? value : parseInt(value);
	if (numValue <= 100) return `w-dynamic-${numValue}`;
	return `container-w-${Math.round(numValue / 10) * 10}`;
};

const getHeightClass = value => {
	if (!value) return '';
	const numValue = typeof value === 'number' ? value : parseInt(value);
	if (numValue <= 100) return `h-dynamic-${numValue}`;
	return `h-dynamic-${numValue}`;
};

const buttonClasses = [
	'ui-button',
	`ui-button--${variant}`,
	`ui-button--${size}`,
	iconOnly ? 'ui-button--icon-only' : '',
	loading ? 'ui-button--loading' : '',
	disabled ? 'ui-button--disabled' : '',
	width ? getSizeClass(width) : '',
	height ? getHeightClass(height) : '',
	className,
]
	.filter(Boolean)
	.join(' ');
---

<Tag class={buttonClasses} aria-disabled={disabled || loading} {...linkProps} {...buttonProps}>
	{
		loading && (
			<div class="ui-button__spinner">
				<img class="ui-button__spinner-icon" src="./assets/images/icon/icon-spinner.svg" alt="로딩 중" />
			</div>
		)
	}

	{
		hasIcon && iconPosition === 'left' && !loading && (
			<div class="ui-button__icon ui-button__icon--left">
				<img src={`./assets/images/icon/${icon}.svg`} class={`icon icon-md ${iconAddClass}`} />
			</div>
		)
	}

	{hasText && <span class="ui-button__text">{text}</span>}

	{
		hasIcon && iconPosition === 'right' && !loading && (
			<div class="ui-button__icon ui-button__icon--right">
				<img src={`./assets/images/icon/${icon}.svg`} class={`icon icon-sm ${iconAddClass}`} />
			</div>
		)
	}
</Tag>
