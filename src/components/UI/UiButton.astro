---
export interface Props {
  text?: string;
  variant?:
    | 'primary'
    | 'secondary' 
    | 'tertiary'
    | 'text';
  size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
  width?: string;
  height?: string;
  disabled?: boolean;
  loading?: boolean;
  href?: string;
  target?: string;
  icon?: string;
  iconPosition?: 'left' | 'right';
  iconOnly?: boolean;
  class?: string;
}

const {
  text = '버튼',
  variant = 'primary',
  size = 'medium',
  width,
  height,
  disabled = false,
  loading = false,
  href,
  target,
  icon,
  iconPosition = 'right',
  iconOnly = false,
  class: className = '',
} = Astro.props;

const Tag = href ? 'a' : 'button';
const linkProps = href ? { href, target } : {};
const buttonProps = href
  ? {}
  : { type: 'button', disabled: disabled || loading };

const hasIcon = icon && icon.length > 0;
const hasText = text && text.length > 0 && !iconOnly;

const buttonClasses = [
  'ui-button',
  `ui-button--${variant}`,
  `ui-button--${size}`,
  iconOnly ? 'ui-button--icon-only' : '',
  loading ? 'ui-button--loading' : '',
  disabled ? 'ui-button--disabled' : '',
  className,
]
  .filter(Boolean)
  .join(' ');

const buttonStyle = [
  width ? `width: ${typeof width === 'number' ? width + 'px' : width}` : '',
  height
    ? `height: ${typeof height === 'number' ? height + 'px' : height}`
    : '',
]
  .filter(Boolean)
  .join('; ');
---

<Tag
  class={buttonClasses}
  style={buttonStyle || undefined}
  aria-disabled={disabled || loading}
  {...linkProps}
  {...buttonProps}
>
  {
    loading && (
      <div class="ui-button__spinner">
        <svg class="ui-button__spinner-icon" viewBox="0 0 24 24">
          <circle
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="2"
            fill="none"
            stroke-linecap="round"
            stroke-dasharray="32"
            stroke-dashoffset="32"
          >
            <animate
              attributeName="stroke-dashoffset"
              dur="1s"
              values="32;0;32"
              repeatCount="indefinite"
            />
          </circle>
        </svg>
      </div>
    )
  }

  {
    hasIcon && iconPosition === 'left' && !loading && (
      <div class="ui-button__icon ui-button__icon--left">
        <i class={`icon icon-md ${icon}`} />
      </div>
    )
  }

  {hasText && <span class="ui-button__text">{text}</span>}

  {
    hasIcon && iconPosition === 'right' && !loading && (
      <div class="ui-button__icon ui-button__icon--right">
        <i class={`icon-sm ${icon}`} />
      </div>
    )
  }
</Tag>

<style lang="scss">
  @use '@styles/abstracts' as *;
  @use '@styles/variables/colors' as *;

  .ui-button {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: to-rem(4);
    border: to-rem(1) solid transparent;
    border-radius: to-rem(8);
    font-family: 'Pretendard GOV', sans-serif;
    font-weight: 400;
    line-height: 1.5;
    cursor: pointer;
    text-decoration: none;
    transition: all 0.2s ease;
    box-sizing: border-box;
    white-space: nowrap;
    outline: none;

    &:focus-visible {
      outline: 2px solid #256ef4;
      outline-offset: 2px;
    }

    &:disabled,
    &[aria-disabled='true'],
    &--disabled {
      color: #6d7882;
      background: #cdd1d5;
      border-color: #cdd1d5;
      cursor: not-allowed;
      pointer-events: none;
    }

    // 크기 variants - Figma 디자인 시스템 기준
    &--xsmall {
      padding: to-rem(10) to-rem(12);
      font-size: to-rem(15);
      height: to-rem(32);
      border-radius: to-rem(4);
    }

    &--small {
      padding: to-rem(12) to-rem(16);
      font-size: to-rem(15);
      height: to-rem(40);
      border-radius: to-rem(6);
    }

    &--medium {
      padding: to-rem(16) to-rem(20);
      font-size: to-rem(17);
      height: to-rem(48);
      border-radius: to-rem(6);
    }

    &--large {
      padding: to-rem(20) to-rem(24);
      font-size: to-rem(19);
      height: to-rem(56);
      border-radius: to-rem(8);
    }

    &--xlarge {
      padding: to-rem(24) to-rem(32);
      font-size: to-rem(19);
      height: to-rem(64);
      border-radius: to-rem(8);
    }

    // 스타일 variants - Figma 디자인 시스템 기준
    &--primary {
      background: #256ef4;
      color: #ffffff;
      border-color: #256ef4;

      &:hover:not(:disabled):not([aria-disabled='true']):not(.ui-button--disabled) {
        background: #0b50d0;
        border-color: #0b50d0;
      }

      &:active {
        background: #083891;
        border-color: #083891;
      }
    }

    &--secondary {
      background: #ecf2fe;
      color: #256ef4;
      border-color: #256ef4;

      &:hover:not(:disabled):not([aria-disabled='true']):not(.ui-button--disabled) {
        background: #d8e5fd;
      }

      &:active {
        background: #b1cefb;
      }
    }

    &--tertiary {
      background: transparent;
      color: #58616a;
      border-color: #58616a;

      &:hover:not(:disabled):not([aria-disabled='true']):not(.ui-button--disabled) {
        background: #f4f5f6;
      }

      &:active {
        background: #e6e8ea;
      }
    }

    &--text {
      background: transparent;
      color: #256ef4;
      border-color: transparent;

      &:hover:not(:disabled):not([aria-disabled='true']):not(.ui-button--disabled) {
        background: #eef2f7;
      }

      &:active {
        background: #d6e0eb;
      }
    }

    // 아이콘 전용 버튼
    &--icon-only {
      aspect-ratio: 1;
      
      &.ui-button--xsmall {
        padding: to-rem(8);
      }
      &.ui-button--small {
        padding: to-rem(12);
      }
      &.ui-button--medium {
        padding: to-rem(14);
      }
      &.ui-button--large {
        padding: to-rem(18);
      }
      &.ui-button--xlarge {
        padding: to-rem(20);
      }
    }

    // 로딩 상태
    &--loading {
      pointer-events: none;

      .ui-button__text,
      .ui-button__icon {
        opacity: 0;
      }
    }

    // 스피너
    &__spinner {
      position: absolute;
      inset: 0;
      display: flex;
      align-items: center;
      justify-content: center;

      &-icon {
        color: currentColor;
        width: to-rem(16);
        height: to-rem(16);

        .ui-button--large & {
          width: to-rem(20);
          height: to-rem(20);
        }

        .ui-button--xlarge & {
          width: to-rem(24);
          height: to-rem(24);
        }
      }
    }

    // 텍스트
    &__text {
      flex: 1;
      min-width: 0;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;

      .ui-button--icon-only & {
        display: none;
      }
    }

    // 아이콘
    &__icon {
      flex-shrink: 0;
      display: flex;
      align-items: center;
      justify-content: center;

      img {
        display: block;
        width: 100%;
        height: 100%;
        object-fit: contain;
      }

      &--left {
        order: -1;
      }

      &--right {
        order: 1;
      }
    }

    // 크기별 아이콘 크기
    &--xsmall &__icon {
      width: to-rem(16);
      height: to-rem(16);
    }

    &--small &__icon {
      width: to-rem(16);
      height: to-rem(16);
    }

    &--medium &__icon {
      width: to-rem(20);
      height: to-rem(20);
    }

    &--large &__icon {
      width: to-rem(20);
      height: to-rem(20);
    }

    &--xlarge &__icon {
      width: to-rem(24);
      height: to-rem(24);
    }

    // 링크로 사용될 때
    &[href] {
      display: inline-flex;
    }
  }
</style>
