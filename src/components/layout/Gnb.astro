---
const menuData = [
  {
    title: '도서검색',
    type: '3depth',
    items: [
      { label: '소장도서검색', href: '/01_소장도서검색', isSelected: false },
      { label: '통합검색', href: '/search/integrated', isSelected: false },
      {
        label: '인기/신착/추천도서',
        href: '/search/popular',
        isSelected: true,
        subItems: [
          { label: '인기도서', href: '/search/popular/popular', isSelected: true },
          { label: '신착도서', href: '/search/popular/new', isSelected: false },
          { label: '추천도서', href: '/search/popular/recommended', isSelected: false },
        ],
      },
      { label: '인생서가', href: '/search/life-books', isSelected: false },
      { label: '스쿨북스', href: '/search/school-books', isSelected: false },
      {
        label: '도서탐색',
        href: '/search/explore',
        isSelected: false,
        subItems: [
          { label: '카테고리분류', href: '/search/explore/category', isSelected: false },
          { label: '한국십진분류', href: '/search/explore/decimal', isSelected: false },
        ],
      },
      { label: '스마트도서관비치도서', href: '/02_스마트도서관비치도서', isSelected: false },
    ],
  },
  {
    title: '책 읽는 연수구',
    type: '2depth',
    items: [
      { label: '북스타트', href: '/reading-yeonsu/bookstart', isSelected: true },
      { label: '북메이트', href: '/reading-yeonsu/bookmate', isSelected: false },
      { label: '독서동아리 지원 사업', href: '/reading-yeonsu/reading-clubs', isSelected: false },
      { label: '범구민 책읽어주기 문화운동', href: '/reading-yeonsu/reading-campaign', isSelected: false },
      { label: '북크로싱 센터', href: '/reading-yeonsu/bookcrossing', isSelected: false },
      { label: '영유아 전집 대여 사업', href: '/reading-yeonsu/children-books', isSelected: false },
    ],
  },
  {
    title: '안내마당',
    type: '2depth',
    items: [
      { label: '공지사항', href: '/04_공지사항', isSelected: true },
      { label: '신간희망자료', href: '/info/new-request', isSelected: false },
      { label: '도서관 유튜브', href: '/info/youtube', isSelected: false },
      { label: '도서관 소식지', href: '/info/newsletter', isSelected: false },
      { label: '연수구 지역서점', href: '/info/local-bookstores', isSelected: false },
      { label: '부대시설', href: '/info/facilities', isSelected: false },
      { label: '자주하는 질문', href: '/info/faq', isSelected: false },
    ],
  },
  {
    title: '도서서비스',
    type: '3depth',
    items: [
      { label: '통합도서서비스', href: '/service/integrated', isSelected: true },
      { label: '상호대차서비스', href: '/service/interlibrary', isSelected: false },
      { label: '책바다서비스', href: '/service/bookbada', isSelected: false },
      { label: '책나래서비스', href: '/service/booknare', isSelected: false },
      { label: '모바일도서관', href: '/service/mobile', isSelected: false },
      { label: '스마트도서관', href: '/service/smart', isSelected: false },
      { label: '전자도서관', href: '/service/ebooks', isSelected: false },
      {
        label: '희망도서 신청',
        href: '/service/book-request',
        isSelected: false,
        subItems: [
          { label: '서비스 안내', href: '/service/book-request/info', isSelected: false },
          { label: '서비스 신청', href: '/service/book-request/apply', isSelected: false },
        ],
      },
      {
        label: '희망전자책 신청',
        href: '/service/ebook-request',
        isSelected: false,
        subItems: [
          { label: '서비스 안내', href: '/service/ebook-request/info', isSelected: false },
          { label: '서비스 신청', href: '/service/ebook-request/apply', isSelected: false },
        ],
      },
      {
        label: '무료택배도서대출',
        href: '/service/delivery',
        isSelected: false,
        subItems: [
          { label: '서비스 안내', href: '/service/delivery/info', isSelected: false },
          { label: '서비스 신청', href: '/service/delivery/apply', isSelected: false },
        ],
      },
    ],
  },
  {
    title: '열린참여마당',
    type: '3depth',
    items: [
      { label: '도서관에 바란다', href: '/03_도서관에바란다', isSelected: true },
      { label: '자원봉사', href: '/participation/volunteer', isSelected: false },
      {
        label: '도서관 견학',
        href: '/participation/tour',
        isSelected: false,
        subItems: [
          { label: '도서관 견학 안내', href: '/participation/tour/info', isSelected: false },
          { label: '도서관 견학 신청', href: '/participation/tour/apply', isSelected: false },
        ],
      },
      {
        label: '도서기증',
        href: '/participation/donation',
        isSelected: false,
        subItems: [
          { label: '기증안내', href: '/participation/donation/info', isSelected: false },
          { label: '서약서작성', href: '/participation/donation/pledge', isSelected: false },
          { label: '기증신청조회', href: '/participation/donation/status', isSelected: false },
        ],
      },
      {
        label: '독서마라톤',
        href: '/participation/reading-marathon',
        isSelected: false,
        subItems: [
          { label: '독서마라톤 안내', href: '/participation/reading-marathon/info', isSelected: false },
          { label: '독서마라톤 참여', href: '/participation/reading-marathon/join', isSelected: false },
        ],
      },
      {
        label: '독서왕',
        href: '/participation/reading-king',
        isSelected: false,
        subItems: [
          { label: '독서왕 안내', href: '/participation/reading-king/info', isSelected: false },
          { label: '독서왕 참여', href: '/participation/reading-king/join', isSelected: false },
        ],
      },
      {
        label: '출석체크 이벤트',
        href: '/participation/attendance',
        isSelected: false,
        subItems: [
          { label: '출석체크 안내', href: '/participation/attendance/info', isSelected: false },
          { label: '출석하기', href: '/participation/attendance/check', isSelected: false },
        ],
      },
    ],
  },
  {
    title: '문화마당',
    type: '3depth',
    items: [
      { label: '문화행사 신청', href: '/culture/events' },
      { label: '프로그램 신청', href: '/culture/programs' },
      {
        label: '영화상영',
        href: '/culture/movies',
        subItems: [
          { label: '이용안내', href: '/culture/movies/info' },
          { label: '상영작', href: '/culture/movies/schedule' },
        ],
      },
      {
        label: '대관신청',
        href: '/culture/rental',
        subItems: [
          { label: '공연장(청학,꿈담,송도,해돋이)', href: '/culture/rental/performance' },
          { label: '세미나실대관(청학)', href: '/culture/rental/seminar' },
          { label: '커뮤니티룸대관(동춘)', href: '/culture/rental/community' },
          { label: '프로그램실(함박)', href: '/culture/rental/program' },
          { label: '독서토론실대관(송도)', href: '/culture/rental/discussion' },
          { label: '하늘빛정원대관(청학)', href: '/culture/rental/garden' },
          { label: '동아리실대관(꿈담)', href: '/culture/rental/club' },
        ],
      },
    ],
  },
  {
    title: '도서관소개',
    type: '3depth',
    items: [
      { label: '인사말', href: '/about/greeting', isSelected: true },
      { label: '연혁', href: '/about/history', isSelected: false },
      { label: '상징', href: '/about/symbol', isSelected: false },
      { label: '조직도', href: '/about/organization', isSelected: false },
      { label: '자료현황', href: '/about/materials', isSelected: false },
      {
        label: '구립도서관',
        href: '/about/libraries',
        isSelected: false,
        subItems: [
          { label: '송도국제도서관', href: '/about/libraries/songdo', isSelected: false },
          { label: '연수청학도서관', href: '/about/libraries/cheonghak', isSelected: false },
          { label: '연수꿈담도서관', href: '/about/libraries/ggumdam', isSelected: false },
          { label: '송도국제어린이도서관', href: '/about/libraries/songdo-children', isSelected: false },
          { label: '해돋이도서관', href: '/about/libraries/haedoji', isSelected: false },
          { label: '선학별빛도서관', href: '/about/libraries/sunhak', isSelected: false },
          { label: '동춘나래도서관', href: '/about/libraries/dongchun', isSelected: false },
          { label: '함박비류도서관', href: '/about/libraries/hambak', isSelected: false },
        ],
      },
      {
        label: '공립작은도서관',
        href: '/about/small-libraries',
        isSelected: false,
        subItems: [
          { label: '옥련1동작은도서관', href: '/about/small-libraries/okryeon1', isSelected: false },
          { label: '옥련2동어린이작은도서관', href: '/about/small-libraries/okryeon2-children', isSelected: false },
          { label: '연수1동작은도서관', href: '/about/small-libraries/yeonsu1', isSelected: false },
          { label: '송도2동작은도서관', href: '/about/small-libraries/songdo2', isSelected: false },
          { label: '송도3동작은도서관', href: '/about/small-libraries/songdo3', isSelected: false },
          { label: '송도5동작은도서관', href: '/about/small-libraries/songdo5', isSelected: false },
          { label: '솔안공원작은도서관', href: '/about/small-libraries/solan-park', isSelected: false },
          { label: '해찬솔공원작은도서관', href: '/about/small-libraries/haechansol-park', isSelected: false },
          { label: '누리공원작은도서관', href: '/about/small-libraries/nuri-park', isSelected: false },
          { label: '문화공원 북크로싱 센터', href: '/about/small-libraries/culture-park-bookcrossing', isSelected: false },
        ],
      },
    ],
  },
  {
    title: '개발가이드',
    type: '1depth',
    items: [
      { label: '개발가이드', href: '/guide', isSelected: true },
    ],
  },
];
---

<nav class="gnb" id="gnb">
  <!-- 메인 메뉴 바 -->
  <div class="gnb-main">
    <div class="gnb-container">
      <ul class="gnb-main-list" role="menubar">
        {menuData.map((menu, index) => (
          <li class="gnb-main-item" data-menu-index={index} role="none">
            <a 
              href={menu.items[0]?.href} 
              class={`gnb-main-link ${menu.type !== '1depth' ? 'has-dropdown' : ''}`}
              role="menuitem"
              tabindex={index === 0 ? "0" : "-1"}
              aria-haspopup={menu.type !== '1depth' ? "true" : "false"}
              aria-expanded="false"
            >
              <span class="gnb-main-text">{menu.title}</span>
              {menu.type !== '1depth' && (
                <i class="icon icon-sm icon-arrow-down" aria-hidden="true"></i>
              )}
            </a>
          </li>
        ))}
      </ul>
    </div>
  </div>

  <!-- 서브 메뉴 -->
  {menuData.map((menu, index) =>
    menu.type !== '1depth' && (
      <div class="gnb-sub" data-menu-target={index}>
        <div class="gnb-container">
          <div class="gnb-sub-content">
            <!-- 1depth 제목 -->
            <div class="gnb-sub-title">
              <h2 class="gnb-sub-title-text">{menu.title}</h2>
            </div>

            <!-- 2depth 메뉴 -->
            <div class="gnb-sub-menu">
              {menu.items.map((item, itemIndex) => (
                <div 
                  class={`gnb-sub-item ${item.isSelected ? 'selected' : ''}`} 
                  data-item-index={itemIndex}
                  data-sub-items={item.subItems ? JSON.stringify(item.subItems) : ''}
                >
                  <a 
                    href={item.href} 
                    class="gnb-sub-link"
                    tabindex="-1"
                    role="menuitem"
                  >
                    <span class="gnb-sub-text">{item.label}</span>
                    {item.subItems && (
                      <i class="icon icon-xsm icon-arrow-right" aria-hidden="true"></i>
                    )}
                  </a>
                </div>
              ))}
            </div>

            <!-- 3depth 메뉴 -->
            {(menu.type === '3depth' || menu.type === '2depth') && (
              <div class="gnb-third">
                <div class="gnb-third-title">
                  <h3 class="gnb-third-title-text" data-third-title>
                    {(() => {
                      const selectedItem = menu.items.find(item => item.isSelected);
                      const targetItem = selectedItem || menu.items[0];
                      return targetItem?.label || '메뉴';
                    })()}
                  </h3>
                </div>
                <div class="gnb-third-items" data-third-items>
                  <div class="gnb-third-column">
                    {(() => {
                      const selectedItem = menu.items.find(item => item.isSelected);
                      const targetItem = selectedItem || menu.items[0];
                      
                      if (targetItem?.subItems && targetItem.subItems.length > 0) {
                        return targetItem.subItems.map(item => (
                          <div class={`gnb-third-item ${(item as any).isSelected ? 'selected' : ''}`}>
                            <a href={item.href} class="gnb-third-link">
                              <span class="gnb-third-text">{item.label}</span>
                            </a>
                          </div>
                        ));
                      }
                      return [];
                    })()}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    )
  )}
</nav>

<style lang="scss">
  @use '@styles/abstracts' as *;
  @use '@styles/variables/colors' as *;

  .gnb {
    position: relative;
    z-index: 1000;
    --radius-medium2: #{to-rem(6)};
    --color-primary-pr01: #d8e4f3;

    &-container {
      max-width: 1280px;
      margin: 0 auto;
    }
  }

  // 메인 메뉴 바
  .gnb-main {
    background: #ffffff;
    border-top: 1px solid #cdd1d5;
    border-bottom: 1px solid #cdd1d5;

    &-list {
      @include flex(row, flex-start, stretch);
      list-style: none;
      margin: 0;
      padding: 0;
      gap: to-rem(16);
      height: to-rem(56);
    }

    &-link {
      @include flex(row, space-between, center);
      gap: to-rem(8);
      padding: 0 to-rem(16);
      height: to-rem(56);
      width: to-rem(169);
      background: transparent;
      border: none;
      cursor: pointer;
      font-family: 'Pretendard GOV', sans-serif;
      font-size: to-rem(19);
      font-weight: 700;
      line-height: 1.5;
      color: #464c53;
      transition: all 0.2s ease;

      &:hover {
        background: #f8fafc;
      }

      &.selected {
        border-bottom: 4px solid #244874;
        background: #ffffff;
      }
    }

    &-text {
      flex: 1;
      text-align: left;
      white-space: nowrap;
    }
  }

  // 서브 메뉴 영역
  .gnb-sub {
    background: #ffffff;
    border-top: 1px solid #cdd1d5;
    border-bottom: 1px solid #cdd1d5;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    z-index: 999;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;

    &-content {
      @include flex(row, flex-start, stretch);
      padding: to-rem(16) 0;
      gap: to-rem(24);
    }

    &-title {
      width: to-rem(306);
      padding-right: to-rem(24);

      &-text {
        font-family: 'Pretendard GOV', sans-serif;
        font-size: to-rem(24);
        font-weight: 700;
        line-height: 1.5;
        color: #1e2124;
        margin: 0;
        padding: to-rem(16) to-rem(4);
      }
    }

    &-menu {
      width: to-rem(306);
      padding-top: to-rem(8);
      padding-right: to-rem(24);
      @include flex(column, flex-start, stretch);
      gap: to-rem(4);
    }

    &-item {
      border-radius: to-rem(8);
      transition: all 0.2s ease;

      &.selected {
        background: #ecf2f9;
      }

      &:hover {
        background: #f8fafc;
      }
    }

    &-link {
      @include flex(row, space-between, center);
      width: 100%;
      padding: to-rem(16);
      text-decoration: none;
      background: none;
      border: none;
      cursor: pointer;
      border-radius: to-rem(8);
    }

    &-text {
      flex: 1;
      font-family: 'Pretendard GOV', sans-serif;
      font-size: to-rem(17);
      font-weight: 400;
      line-height: 1.5;
      color: #1e2124;
      text-align: left;

      .selected & {
        font-weight: 700;
        color: #052b57;
      }
    }
  }

  // 3depth 메뉴
  .gnb-third {
    flex: 1;
    align-self: stretch;
    border-left: 1px solid #cdd1d5;
    padding: to-rem(8) to-rem(24);

    &-title {
      margin-bottom: to-rem(16);

      &-text {
        font-family: 'Pretendard GOV', sans-serif;
        font-size: to-rem(20);
        font-weight: 700;
        line-height: 1.5;
        color: #1e2124;
        margin: 0;
        padding: to-rem(8) 0;
      }
    }

    &-items {
      // 3depth 항목들이 있을 때만 표시
      &:empty {
        display: none;
      }
    }

    &-column {
      @include flex(column, flex-start, stretch);
      width: to-rem(298);
    }

    &-item {
      border-radius: var(--radius-medium2);
      transition: all 0.2s ease;

      &.selected {
        background: var(--color-primary-pr01);
      }

      &:hover {
        background: #f1f5f9;
      }
    }

    //  GNB
    .gnb-third-item {
      display: flex;
      align-items: center;
      gap: var(--gap-2, 4px);
      align-self: stretch;
      border-radius: var(--radius-medium2, 6px);
      background: var(--color-action-secondary, rgba(255, 255, 255, 0));
      position: relative;
      @include makeBefore {
        @include ab-y;
        left: 6px;
        width: 4px;
        height: 4px;
        border-radius: 50%;
        background: #000;
      }
      .gnb-third-link {
        display: block;
        width: 100%;
        height: 100%;
        padding: var(--padding-4, 18px) var(--padding-3, 8px);
        padding-left: 22px;
        .gnb-third-text {
          @include font(to-rem(17), 400, #121212);
        }
      }
      &:hover {
        border-radius: var(--radius-medium2, 6px);
        background: var(--color-primary-pr01, #d8e4f3);
        .gnb-third-text {
          color: $primary-color !important;
          font-weight: 700 !important;
        }
      }
    }
  }

  @include mobile {
    .gnb {
      display: none;
    }
  }
</style>


<script>
  document.addEventListener('DOMContentLoaded', function() {
    const gnbItems = document.querySelectorAll('.gnb-main-item[data-menu-index]');
    const gnbSubs = document.querySelectorAll('.gnb-sub[data-menu-target]');
    const gnbLinks = document.querySelectorAll('.gnb-main-link');
    let currentTimeout = null;
    
    // 전체 탭 순서 관리
    let allFocusableElements = [];
    let currentTabIndex = 0;

    // 모든 포커스 가능한 요소들을 순서대로 배열에 저장
    function buildTabOrder() {
      allFocusableElements = [];
      
      gnbItems.forEach((item, mainIndex) => {
        const mainLink = item.querySelector('.gnb-main-link');
        const correspondingSub = document.querySelector(`.gnb-sub[data-menu-target="${mainIndex}"]`);
        
        // 메인 메뉴 추가
        allFocusableElements.push({
          element: mainLink,
          type: 'main',
          mainIndex: mainIndex,
          subIndex: -1
        });
        
        // 서브 메뉴가 있으면 서브 메뉴 항목들도 추가
        if (correspondingSub) {
          const subLinks = correspondingSub.querySelectorAll('.gnb-sub-link');
          subLinks.forEach((subLink, subIndex) => {
            allFocusableElements.push({
              element: subLink,
              type: 'sub',
              mainIndex: mainIndex,
              subIndex: subIndex
            });
          });
        }
      });
      
      // 다음 포커스 가능한 요소들 찾기 (메인 배너 등)
      const nextFocusableElements = findNextFocusableElements();
      allFocusableElements = [...allFocusableElements, ...nextFocusableElements];
      
      // 모든 요소의 tabindex를 -1로 설정 (첫 번째 제외)
      allFocusableElements.forEach((item, index) => {
        item.element.setAttribute('tabindex', index === 0 ? '0' : '-1');
      });
    }

    // GNB 다음에 오는 포커스 가능한 요소들 찾기
    function findNextFocusableElements() {
      const nextElements = [];
      const gnbElement = document.getElementById('gnb');
      
      if (gnbElement) {
        // GNB 다음 형제 요소들에서 포커스 가능한 요소 찾기
        let nextSibling = gnbElement.nextElementSibling;
        
        while (nextSibling) {
          // 포커스 가능한 요소들 찾기
          const focusableInSibling = nextSibling.querySelectorAll(
            'a[href], button, input, textarea, select, [tabindex]:not([tabindex="-1"])'
          );
          
          focusableInSibling.forEach(element => {
            nextElements.push({
              element: element,
              type: 'external',
              mainIndex: -1,
              subIndex: -1
            });
          });
          
          // 첫 번째 포커스 가능한 요소를 찾으면 멈춤 (보통 메인 배너가 첫 번째)
          if (nextElements.length > 0) {
            break;
          }
          
          nextSibling = nextSibling.nextElementSibling;
        }
        
        // 특정 선택자로 메인 배너 찾기 (프로젝트에 맞게 수정)
        if (nextElements.length === 0) {
          const mainBanner = document.querySelector('.main-banner a, .banner a, .hero a, [data-main-banner] a');
          if (mainBanner) {
            nextElements.push({
              element: mainBanner,
              type: 'external',
              mainIndex: -1,
              subIndex: -1
            });
          }
        }
      }
      
      return nextElements;
    }

    // 키보드 네비게이션 설정
    function setupKeyboardNavigation() {
      // 전역 키보드 이벤트 리스너
      document.addEventListener('keydown', (e) => {
        const focusedElement = document.activeElement;
        const currentItem = allFocusableElements.find(item => item.element === focusedElement);
        
        if (!currentItem) return;

        switch(e.key) {
          case 'Tab':
            e.preventDefault();
            if (e.shiftKey) {
              navigateToPrevTab();
            } else {
              navigateToNextTab();
            }
            break;
          case 'ArrowRight':
            e.preventDefault();
            if (currentItem.type === 'main') {
              navigateToNextMainMenu();
            }
            break;
          case 'ArrowLeft':
            e.preventDefault();
            if (currentItem.type === 'main') {
              navigateToPrevMainMenu();
            }
            break;
          case 'ArrowDown':
            e.preventDefault();
            if (currentItem.type === 'main') {
              navigateToSubmenu(currentItem.mainIndex);
            } else if (currentItem.type === 'sub') {
              navigateToNextSubmenuItem();
            }
            break;
          case 'ArrowUp':
            e.preventDefault();
            if (currentItem.type === 'sub') {
              navigateToPrevSubmenuItem();
            }
            break;
          case 'Enter':
          case ' ':
            e.preventDefault();
            currentItem.element.click();
            break;
          case 'Escape':
            e.preventDefault();
            hideAllSubmenus();
            navigateToMainFromSub();
            break;
        }
      });

      // 각 요소에 포커스 이벤트 추가
      allFocusableElements.forEach((item, index) => {
        item.element.addEventListener('focus', () => {
          currentTabIndex = index;
          updateTabIndex(index);
          
          if (item.type === 'main') {
            // 메인 메뉴 포커스 시 서브메뉴 표시
            if (item.element.getAttribute('aria-haspopup') === 'true') {
              showSubmenu(item.mainIndex);
            }
          } else if (item.type === 'sub') {
            // 서브 메뉴 포커스 시 해당 메인 메뉴의 서브메뉴 표시
            showSubmenu(item.mainIndex);
          } else if (item.type === 'external') {
            // GNB 외부 요소 포커스 시 모든 서브메뉴 숨기기
            hideAllSubmenus();
          }
        });
      });
    }

    // 다음 탭으로 이동
    function navigateToNextTab() {
      const nextIndex = (currentTabIndex + 1) % allFocusableElements.length;
      const nextItem = allFocusableElements[nextIndex];
      
      // GNB에서 외부 요소로 이동할 때 서브메뉴 숨기기
      if (allFocusableElements[currentTabIndex].type !== 'external' && nextItem.type === 'external') {
        hideAllSubmenus();
      }
      
      focusElement(nextIndex);
    }

    // 이전 탭으로 이동  
    function navigateToPrevTab() {
      const prevIndex = currentTabIndex === 0 ? allFocusableElements.length - 1 : currentTabIndex - 1;
      const prevItem = allFocusableElements[prevIndex];
      
      // 외부 요소에서 GNB로 돌아올 때 적절한 서브메뉴 표시
      if (allFocusableElements[currentTabIndex].type === 'external' && prevItem.type !== 'external') {
        if (prevItem.type === 'main' && prevItem.element.getAttribute('aria-haspopup') === 'true') {
          showSubmenu(prevItem.mainIndex);
        } else if (prevItem.type === 'sub') {
          showSubmenu(prevItem.mainIndex);
        }
      }
      
      focusElement(prevIndex);
    }

    // 다음 메인 메뉴로 이동
    function navigateToNextMainMenu() {
      const currentItem = allFocusableElements[currentTabIndex];
      if (currentItem.type !== 'main') return;
      
      const nextMainIndex = (currentItem.mainIndex + 1) % gnbLinks.length;
      const nextMainItem = allFocusableElements.find(item => 
        item.type === 'main' && item.mainIndex === nextMainIndex
      );
      
      if (nextMainItem) {
        const index = allFocusableElements.indexOf(nextMainItem);
        focusElement(index);
      }
    }

    // 이전 메인 메뉴로 이동
    function navigateToPrevMainMenu() {
      const currentItem = allFocusableElements[currentTabIndex];
      if (currentItem.type !== 'main') return;
      
      const prevMainIndex = currentItem.mainIndex === 0 ? gnbLinks.length - 1 : currentItem.mainIndex - 1;
      const prevMainItem = allFocusableElements.find(item => 
        item.type === 'main' && item.mainIndex === prevMainIndex
      );
      
      if (prevMainItem) {
        const index = allFocusableElements.indexOf(prevMainItem);
        focusElement(index);
      }
    }

    // 서브메뉴로 이동
    function navigateToSubmenu(mainIndex) {
      const firstSubItem = allFocusableElements.find(item => 
        item.type === 'sub' && item.mainIndex === mainIndex && item.subIndex === 0
      );
      
      if (firstSubItem) {
        const index = allFocusableElements.indexOf(firstSubItem);
        focusElement(index);
      }
    }

    // 다음 서브메뉴 항목으로 이동
    function navigateToNextSubmenuItem() {
      const currentItem = allFocusableElements[currentTabIndex];
      if (currentItem.type !== 'sub') return;
      
      const nextSubItem = allFocusableElements.find(item => 
        item.type === 'sub' && 
        item.mainIndex === currentItem.mainIndex && 
        item.subIndex === currentItem.subIndex + 1
      );
      
      if (nextSubItem) {
        const index = allFocusableElements.indexOf(nextSubItem);
        focusElement(index);
      }
    }

    // 이전 서브메뉴 항목으로 이동
    function navigateToPrevSubmenuItem() {
      const currentItem = allFocusableElements[currentTabIndex];
      if (currentItem.type !== 'sub') return;
      
      const prevSubItem = allFocusableElements.find(item => 
        item.type === 'sub' && 
        item.mainIndex === currentItem.mainIndex && 
        item.subIndex === currentItem.subIndex - 1
      );
      
      if (prevSubItem) {
        const index = allFocusableElements.indexOf(prevSubItem);
        focusElement(index);
      }
    }

    // 서브메뉴에서 메인 메뉴로 돌아가기
    function navigateToMainFromSub() {
      const currentItem = allFocusableElements[currentTabIndex];
      if (currentItem.type !== 'sub') return;
      
      const mainItem = allFocusableElements.find(item => 
        item.type === 'main' && item.mainIndex === currentItem.mainIndex
      );
      
      if (mainItem) {
        const index = allFocusableElements.indexOf(mainItem);
        focusElement(index);
      }
    }

    // 특정 인덱스로 포커스 이동
    function focusElement(index) {
      currentTabIndex = index;
      updateTabIndex(index);
      allFocusableElements[index].element.focus();
    }

    // tabindex 업데이트
    function updateTabIndex(focusIndex) {
      allFocusableElements.forEach((item, index) => {
        item.element.setAttribute('tabindex', index === focusIndex ? '0' : '-1');
      });
    }

    // 서브메뉴 표시
    function showSubmenu(menuIndex) {
      const correspondingSub = document.querySelector(`.gnb-sub[data-menu-target="${menuIndex}"]`);
      if (!correspondingSub) return;

      hideAllSubmenus();

      (correspondingSub as HTMLElement).style.opacity = '1';
      (correspondingSub as HTMLElement).style.visibility = 'visible';
      (correspondingSub as HTMLElement).style.transform = 'translateY(0)';
      
      // aria-expanded 업데이트
      gnbLinks[menuIndex].setAttribute('aria-expanded', 'true');
    }

    // 모든 서브메뉴 숨기기
    function hideAllSubmenus() {
      gnbSubs.forEach(sub => {
        const subElement = sub as HTMLElement;
        subElement.style.opacity = '0';
        subElement.style.visibility = 'hidden';
        subElement.style.transform = 'translateY(-10px)';
      });

      gnbLinks.forEach(link => {
        link.setAttribute('aria-expanded', 'false');
      });
    }

    // 기존 마우스 이벤트들
    gnbItems.forEach((item) => {
      const menuIndex = parseInt(item.getAttribute('data-menu-index'));
      const correspondingSub = document.querySelector(`.gnb-sub[data-menu-target="${menuIndex}"]`);

      if (!correspondingSub) return;

      // 메인 메뉴 호버 이벤트
      item.addEventListener('mouseenter', () => {
        if (currentTimeout) {
          clearTimeout(currentTimeout);
          currentTimeout = null;
        }

        showSubmenu(menuIndex);
      });

      item.addEventListener('mouseleave', (e) => {
        const mouseEvent = e as MouseEvent;
        if (!correspondingSub.contains(mouseEvent.relatedTarget as Node)) {
          currentTimeout = setTimeout(() => {
            hideAllSubmenus();
          }, 100);
        }
      });

      // 서브 메뉴 호버 이벤트
      correspondingSub.addEventListener('mouseenter', () => {
        if (currentTimeout) {
          clearTimeout(currentTimeout);
          currentTimeout = null;
        }
      });

      correspondingSub.addEventListener('mouseleave', (e) => {
        const mouseEvent = e as MouseEvent;
        if (!item.contains(mouseEvent.relatedTarget as Node)) {
          hideAllSubmenus();
        }
      });

      // 2depth 메뉴 항목들의 호버 이벤트
      const subItems = correspondingSub.querySelectorAll('.gnb-sub-item[data-item-index]');
      const thirdTitle = correspondingSub.querySelector('[data-third-title]');
      const thirdItems = correspondingSub.querySelector('[data-third-items]');
      
      subItems.forEach((subItem) => {
        subItem.addEventListener('mouseenter', () => {
          // 모든 항목에서 selected 클래스 제거하고 현재 항목에만 추가
          subItems.forEach((item, idx) => {
            const currentIndex = parseInt(subItem.getAttribute('data-item-index'));
            const itemIndex = parseInt(item.getAttribute('data-item-index'));
            item.classList.toggle('selected', itemIndex === currentIndex);
          });

          // 3depth 메뉴 업데이트
          if (thirdTitle && thirdItems) {
            const label = subItem.querySelector('.gnb-sub-text')?.textContent;
            const subItemsData = subItem.getAttribute('data-sub-items');
            
            // 제목 업데이트
            if (label) {
              thirdTitle.textContent = label;
            }
            
            // 3depth 항목들 업데이트
            if (subItemsData && subItemsData !== '') {
              try {
                const subItemsParsed = JSON.parse(subItemsData);
                thirdItems.innerHTML = '';
                
                subItemsParsed.forEach(thirdItem => {
                  const thirdDiv = document.createElement('div');
                  thirdDiv.className = `gnb-third-item ${thirdItem.isSelected ? 'selected' : ''}`;
                  thirdDiv.innerHTML = `
                    <a href="${thirdItem.href}" class="gnb-third-link">
                      <span class="gnb-third-text">${thirdItem.label}</span>
                    </a>
                  `;
                  thirdItems.appendChild(thirdDiv);
                });
                
                thirdItems.style.display = 'block';
              } catch (e) {
                console.error('JSON 파싱 오류:', e);
                thirdItems.innerHTML = '';
                thirdItems.style.display = 'none';
              }
            } else {
              // subItems가 없으면 3depth 영역 숨기기
              thirdItems.innerHTML = '';
              thirdItems.style.display = 'none';
            }
          }
        });
      });
    });

    // 전체 GNB 영역을 벗어나면 숨기기
    const gnbElement = document.getElementById('gnb');
    if (gnbElement) {
      gnbElement.addEventListener('mouseleave', () => {
        hideAllSubmenus();
      });
    }

    // 초기화
    buildTabOrder();
    setupKeyboardNavigation();
  });
</script>