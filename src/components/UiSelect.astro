---
export interface Props {
  /**
   * select의 id 속성
   */
  id?: string;
  /**
   * select의 name 속성
   */
  name?: string;
  /**
   * select의 기본값
   */
  value?: string;
  /**
   * select 너비 (rem 단위)
   */
  width?: number;
  /**
   * select 높이 (rem 단위)
   */
  height?: number;
  /**
   * 비활성화 여부
   */
  disabled?: boolean;
  /**
   * 필수 입력 여부
   */
  required?: boolean;
  /**
   * 스타일 variant
   */
  variant?: 'default' | 'ghost';
  /**
   * 추가 CSS 클래스
   */
  class?: string;
  /**
   * 옵션 배열
   */
  options: Array<{
    value: string;
    label: string;
    disabled?: boolean;
  }>;
}

const {
  id,
  name,
  value,
  width = 180,
  height = 56,
  disabled = false,
  required = false,
  variant = 'default',
  class: className = '',
  options = [],
  ...rest
} = Astro.props;

const selectId = id || `select-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={`ui-select ui-select--${variant} ${className}`}>
  <div class="ui-select__wrapper">
    <select
      id={selectId}
      name={name}
      disabled={disabled}
      required={required}
      class="ui-select__element"
      style={`width: ${width / 16}rem; height: ${height / 16}rem;`}
      {...rest}
    >
      {options.map((option) => (
        <option 
          value={option.value} 
          disabled={option.disabled}
          selected={value === option.value}
        >
          {option.label}
        </option>
      ))}
    </select>
    <div class="ui-select__arrow">
      <svg viewBox="0 0 20 20" fill="none">
        <path 
          d="m6 8 4 4 4-4" 
          stroke="currentColor" 
          stroke-width="1.5" 
          stroke-linecap="round" 
          stroke-linejoin="round"
        />
      </svg>
    </div>
  </div>
</div>

<style lang="scss">
@use '../styles/abstracts' as *;
@use '../styles/variables/colors' as *;

.ui-select {
  position: relative;
  display: inline-block;

  &__wrapper {
    position: relative;
    display: inline-block;
  }

  &__element {
    padding: 0 to-rem(40) 0 to-rem(16);
    border: 1px solid #58616a;
    border-radius: to-rem(6);
    background: $white;
    font-family: 'Pretendard GOV', sans-serif;
    font-size: to-rem(19);
    font-weight: 400;
    color: $gray-600;
    appearance: none;
    cursor: pointer;
    transition: all 0.2s ease;

    &:focus {
      outline: to-rem(2) solid $primary-color;
      outline-offset: to-rem(2);
      border-color: $primary-color;
    }

    &:disabled {
      background: #f5f5f5;
      color: #999;
      cursor: not-allowed;
      border-color: #ddd;
    }

    &:hover:not(:disabled) {
      border-color: #404040;
    }
  }

  // Ghost variant
  &--ghost &__element {
    border: none;
    background: transparent;
    color: #1e2124;
    font-weight: 600;
    padding: 0 to-rem(24) 0 0;

    &:focus {
      outline: none;
      background: rgba(60, 121, 194, 0.1);
      border-radius: to-rem(4);
    }

    &:hover:not(:disabled) {
      background: rgba(0, 0, 0, 0.05);
      border-radius: to-rem(4);
    }
  }

  &--ghost &__arrow {
    right: 0;
  }

  &__arrow {
    position: absolute;
    right: to-rem(16);
    top: 50%;
    transform: translateY(-50%);
    width: to-rem(16);
    height: to-rem(16);
    color: $gray-600;
    pointer-events: none;
    transition: transform 0.2s ease;

    svg {
      width: 100%;
      height: 100%;
    }
  }

  // select가 열렸을 때 화살표 회전 (브라우저 지원이 제한적이지만 추가)
  &__element:focus + &__arrow {
    transform: translateY(-50%) rotate(180deg);
  }
}
</style>