# 연수도서관 웹사이트 개발 가이드

## 📋 프로젝트 개요
- **타입**: 퍼블리싱 전용 프로젝트 (백엔드 없음)
- **프레임워크**: Astro 4.15.0 기반 정적 사이트
- **스타일링**: SCSS 7-1 아키텍처 + BEM 방법론
- **JavaScript**: Vanilla JS 전용 (타입스크립트 사용 금지)
- **상태관리**: Nanostores (클라이언트 상태)
- **슬라이더**: Swiper.js 11.2.10

## 🚫 퍼블리싱 전용 - 금지 사항
- 백엔드 API 연동 코드 작성 금지
- 데이터베이스 관련 코드 금지
- 서버 사이드 로직 금지
- 실제 폼 제출 처리 금지 (UI만 구현)
- 인증/권한 로직 금지 (UI만 구현)
- fetch/axios 등 HTTP 클라이언트 사용 금지
- **타입스크립트 사용 금지** (Vanilla JS만 사용)

## 🏗️ SCSS 아키텍처 규칙

### 폴더 구조 (7-1 패턴)
styles/
├── abstracts/ # 함수, 믹스인
│ ├── functions.scss # to-rem(), vw(), alpha()
│ ├── mixins.scss # flex, 반응형, 버튼 등
│ └── index.scss # 통합 export
├── variables/ # 색상, 타이포그래피, 레이아웃
│ ├── colors.scss # 색상 팔레트
│ ├── typography.scss # 폰트 시스템
│ └── layout.scss # 브레이크포인트
├── utilities/ # 원자 단위 클래스
│ ├── flex.scss # flex 유틸리티
│ ├── spacing.scss # margin, padding
│ ├── typography.scss # 텍스트 유틸리티
│ └── width.scss # width 유틸리티
├── components/ # 컴포넌트별 스타일
├── pages/ # 페이지별 스타일
├── common.scss # 글로벌 스타일
└── main.scss # 엔트리포인트
public/assets/js/
├── common.js # 전역 초기화 (LibraryCommon)
├── accordion.js # 아코디언 컴포넌트
├── tab.js # 탭 컴포넌트
├── swiper.js # 스와이퍼 슬라이더
├── modal.js # 모달 컴포넌트
├── mobile-menu.js # 모바일 메뉴
├── search-tabs.js # 검색 탭
├── filter.js # 필터 기능
├── collection.js # 컬렉션 관리
└── keyboard.js # 가상 키보드


### 함수 사용 규칙
- `to-rem()`: px을 rem으로 변환 필수 (폰트사이즈, 패딩, 마진)
- `vw()`: 반응형 크기 계산 (1920px 기준)
- `alpha()`: 색상 투명도 조절
- **모바일에서는 to-rem() 사용 금지** (px 직접 사용)

### 믹스인 패턴
```scss
// Flex 시스템
@include flex($direction, $justify, $align, $wrap)
@include flex-center, @include flex-between, @include flex-column

// 반응형
@include mobile    // max-width: 900px
@include tablet    // 900px ~ 1200px  
@include desktop   // min-width: 1200px

// 버튼
@include button($bg-color, $text-color, $padding)
@include button-reset

// 기타
@include font-size($size, $line-height)
@include text-truncate, @include text-truncate-lines($lines)
@include shadow($level), @include bg-image($url, $size, $position)
```

## 🎨 디자인 시스템

### 색상 변수 (variables/_colors.scss)
```scss
// 메인 색상
$primary-color: #3c79c2;      // Primary Blue
$secondary-color: #063a74;    // Dark Blue
$text-color: #333;
$border-color: #ecf2fe;

// Gray 팔레트
$gray-50: #f9fafb;   $gray-400: #9ca3af;   $gray-800: #1f2937;
$gray-100: #f3f4f6;  $gray-500: #6b7280;   $gray-900: #111827;
$gray-200: #e5e7eb;  $gray-600: #6b7280;
$gray-300: #d1d5db;  $gray-700: #374151;

// 상태 색상
$success-color: #228738;
$error-color: #ef4444;
$warning-color: #ffb114;
$info-color: #3c79c2;

// 기관별 색상 (연수구 도서관 시스템)
$institution-전체: #008f37;       $institution-해돋이: #ef6601;
$institution-연수꿈담: #a3cf62;   $institution-해찬솔공원: #189ba7;
$institution-송도국제: #8e63aa;   $institution-선학별빛: #ffacc1;
$institution-청학: #7fa7d7;       $institution-누리공원: #7b19d7;
```

### 타이포그래피 시스템
```scss
// 페이지 타이틀
@include page-title('h1');  // 2.5rem (40px)
@include page-title('h2');  // 1.75rem (28px)
@include page-title('h3');  // 1.5rem (24px)

// 반응형 폰트 (모바일에서 85% 크기)
```

### 브레이크포인트
```scss
$breakpoint-sm: 900px;   // 모바일
$breakpoint-lg: 1200px;  // 데스크톱
```

## 🧩 컴포넌트 규칙

### Astro 컴포넌트 명명 규칙
```astro
<!-- 파일명: 파스칼케이스 -->
UiButton.astro, UiInput.astro, UiModal.astro

<!-- UI 컴포넌트: Ui 접두사 필수 -->
<!-- 레이아웃 컴포넌트: layout/ 폴더 (접두사 없음) -->
Header.astro, Footer.astro, SubLayout.astro

<!-- Props 인터페이스 정의 필수 (Astro 기본 인터페이스 사용) -->
---
export interface Props {
  variant?: 'primary' | 'secondary';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
}
---
```

### SCSS 스타일링 (BEM 방법론)
```scss
.ui-button {                    // Block
  &__text { }                   // Element
  &__icon { }                   // Element
  &__spinner { }                // Element
  
  &--primary { }                // Modifier (variant)
  &--secondary { }              // Modifier (variant)
  &--small { }                  // Modifier (size)
  &--large { }                  // Modifier (size)
  &--disabled { }               // Modifier (state)
  &--loading { }                // Modifier (state)
  &--icon-only { }              // Modifier (type)
}
```

### 컴포넌트 variants 및 크기
```scss
// UiButton variants
primary, secondary, tertiary, darkBlue, text

// 크기 시스템
xsmall, small, medium, large, xlarge

// 상태
disabled, loading, active, hover, focus
```

## ⚡ 유틸리티 클래스 (Tailwind 스타일)

### Flex 유틸리티
```scss
// Display
.flex, .inline-flex

// Direction  
.flex-row, .flex-col, .flex-row-reverse, .flex-col-reverse

// Justify Content
.justify-start, .justify-center, .justify-end
.justify-between, .justify-around, .justify-evenly

// Align Items
.items-start, .items-center, .items-end
.items-baseline, .items-stretch

// Flex Wrap
.flex-wrap, .flex-nowrap, .flex-wrap-reverse

// Gap (0~100, 4px 단위)
.gap-0, .gap-4, .gap-8, .gap-12, .gap-16, .gap-20, .gap-24
.gap-x-4, .gap-y-8 (축별 gap)
```

### Spacing 유틸리티 (rem 단위 변환)
```scss
// Margin
.m{값}, .mt{값}, .mb{값}, .ml{값}, .mr{값}
.mx{값}, .my{값}  // 축별 margin
.-m{값}           // 네거티브 margin

// Padding  
.p{값}, .pt{값}, .pb{값}, .pl{값}, .pr{값}
.px{값}, .py{값}  // 축별 padding

// Auto margins
.m-auto, .mx-auto, .my-auto, .mt-auto, .mb-auto

// 반응형
.sm\:m{값}, .md\:m{값}, .lg\:m{값}
```

**값 범위**: 0~30, 32, 36, 40, 44, 48, 56, 64, 72, 80, 96, 112, 128

### Width 유틸리티
```scss
// 픽셀 단위
.w-1 ~ .w-999     // 1px ~ 999px

// 특별한 값
.w-auto, .w-full, .w-screen, .w-min, .w-max, .w-fit

// 백분율
.w-half (50%), .w-third (33.33%), .w-quarter (25%)
.w-10p, .w-20p, .w-30p ... .w-100p

// 반응형
.sm\:w-full, .md\:w-auto, .lg\:w-500

// Max/Min width
.max-w{값}, .min-w{값}
```

### Typography 유틸리티
```scss
// Text Align
.text-left, .text-center, .text-right, .text-justify

// Text Truncate
.truncate, .text-ellipsis
.line-clamp-1, .line-clamp-2, .line-clamp-3

// Font Weight
.font-light, .font-normal, .font-medium, .font-semibold, .font-bold

// Font Size (rem 기반)
.text-xs, .text-sm, .text-base, .text-lg, .text-xl, .text-2xl
```

## 💻 JavaScript 패턴 (Vanilla JS 전용)

### 스크립트 로드 방식
```astro
<!-- Layout에서 기능별 스크립트 로드 -->
---
// BaseLayout.astro 또는 Layout.astro
---
<head>
  <!-- 글로벌 스크립트 -->
  <script src="/assets/js/common.js"></script>
</head>

<body>
  <!-- 페이지별 기능 스크립트 -->
  <script src="/assets/js/accordion.js"></script>
  <script src="/assets/js/tab.js"></script>
  <script src="/assets/js/swiper.js"></script>
  <!-- 필요한 기능만 선택적 로드 -->
</body>
```


### 모듈 패턴 (개별 JS 파일)
```javascript
// accordion.js 예시
(function() {
  'use strict';
  
  // LibraryCommon이 로드되었을 때 기능 등록
  if (window.LibraryCommon) {
    window.LibraryCommon.features.accordion = {
      selector: '[data-accordion]',
      init: initAccordion
    };
  }
  
  function initAccordion() {
    const accordions = document.querySelectorAll('[data-accordion]');
    
    accordions.forEach(accordion => {
      // 이미 초기화된 경우 스킵
      if (accordion.dataset.accordionInitialized) return;
      accordion.dataset.accordionInitialized = 'true';
      
      const toggle = accordion.querySelector('[data-accordion-toggle]');
      const content = accordion.querySelector('[data-accordion-content]');
      
      if (!toggle || !content) return;
      
      toggle.addEventListener('click', function() {
        const isExpanded = this.getAttribute('aria-expanded') === 'true';
        
        // 상태 토글
        this.setAttribute('aria-expanded', !isExpanded);
        content.setAttribute('aria-hidden', isExpanded);
        
        // 클래스 토글
        accordion.classList.toggle('is-expanded');
      });
    });
  }
  
  // 수동 호출 가능하도록 전역 함수로도 등록
  window.initAccordion = initAccordion;
})();
```

### 데이터 속성 규칙
```html
<!-- 기능 트리거 -->
<button data-menu-toggle="menu-1" aria-expanded="false">메뉴</button>
<button data-tab="tab-1" aria-selected="false">탭</button>
<button data-modal="modal-1">모달 열기</button>
<button data-accordion="accordion-1">아코디언</button>

<!-- 타겟 요소 -->
<div data-menu-content="menu-1" aria-hidden="true">메뉴 내용</div>
<div data-tab-content="tab-1" aria-hidden="true">탭 내용</div>
<div data-modal-content="modal-1" aria-hidden="true">모달 내용</div>
<div data-accordion-content="accordion-1" aria-hidden="true">아코디언 내용</div>

<!-- 상태 관리 (접근성) -->
aria-expanded="true/false"  <!-- 확장/축소 상태 -->
aria-selected="true/false"  <!-- 선택 상태 -->
aria-hidden="true/false"    <!-- 표시/숨김 상태 -->
```

## 📄 페이지 구조 및 라우팅

### 페이지 명명 규칙


### 레이아웃 시스템
```astro
<!-- BaseLayout.astro - 기본 HTML 구조 -->
<!-- Layout.astro - 일반 페이지 레이아웃 -->
<!-- SearchLayout.astro - 검색 페이지 전용 -->
<!-- SubLayout.astro - 서브 페이지 레이아웃 -->
```

### 메뉴 데이터 구조 (menuData.ts)
```javascript
// Astro에서는 .ts 파일이지만 순수 JS 객체로만 구성
export const menuConfig = {
  '도서검색': {
    title: '도서검색',
    sections: [
      {
        title: '소장도서검색',
        isExpanded: true,
        href: '/01_소장도서검색'
      },
      {
        title: '통합검색',
        isExpanded: false,
        items: [
          { label: '도서', href: '/search/books' },
          { label: '연속간행물', href: '/search/serials' }
        ]
      }
    ]
  }
};
```

## 🔧 개발 환경 및 도구

### 개발 스크립트
```json
{
  "dev": "astro dev --host",
  "dev:turbo": "astro dev + SCSS 감시",
  "dev:full": "astro dev + SCSS 감시 + 파일 감시",
  "build:clean": "빌드 + 포매팅 + 후처리",
  "build:jsp": "빌드 + JSP 호환 처리"
}
```

### Astro 설정 주요 포인트
```javascript
// astro.config.mjs
{
  scopedStyleStrategy: 'where',  // CSS 스코핑 전략
  devToolbar: { enabled: false }, // 개발 도구모음 비활성화
  compilerOptions: { sourcemap: true }, // 소스맵 활성화
  
  // Path aliases
  '@': './src',
  '@components': './src/components',  
  '@ui': './src/components/UI',
  '@styles': './src/styles'
}
```

## 🎯 프로젝트 목표

이 프로젝트는 **연수구립도서관 시스템의 프론트엔드 인터페이스**를 구현하는 퍼블리싱 전용 웹사이트입니다. 

**핵심 가치:**
- 📚 사용자 중심의 직관적인 도서 검색 경험
- 🎨 일관되고 세련된 디자인 시스템
- ⚡ 빠르고 반응성 좋은 인터페이스
- ♿ 모든 사용자가 접근 가능한 웹사이트
- 🔧 유지보수가 용이한 확장 가능한 구조

**기술적 철학:**
- 🚫 타입스크립트 완전 배제, 순수 Vanilla JS 활용
- 📂 기능별 모듈화된 스크립트 구조
- 🔗 Layout에서 선택적 스크립트 로드
- 🎯 데이터 속성 기반 컴포넌트 초기화